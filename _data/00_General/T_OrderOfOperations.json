{
  "alternatePhrases": [
    "operator precedence",
    "precedence of operations"
  ],
  "definition": "The *order of operations* is a convention that tells us how to evaluate\nmathematical expressions (these could be purely numerical). The problem\narises because expressions consist of operators applied to variables or\nvalues (or other expressions) that each demand *individual evaluation*,\nyet the order in which these individual evaluations are done leads to\ndifferent outcomes.\n\nA conventional order of operations solves this. One could technically do\nwithout memorizing this convention, but the only alternative is to use\nparentheses to group every single term of an expression and evaluate the\ninnermost operations first.\n\nFor example, in the expression $a\\cdot b + c$, how do we know whether to\napply multiplication or addition first? We could interpret even this\nsimple expression two drastically different ways:\n\n1.  Add $b$ and $c$,\n\n2.  Multiply the sum from (1) with $a$.\n\nor\n\n1.  Multiply $a$ and $b$,\n\n2.  Add to the product in (1) the value of $c$.\n\nOne can see the different outcomes for the two cases by selecting some\ndifferent values for $a$, $b$, and $c$. The issue is resolved by\nconvention in order of operations: the correct evaluation would be the\nsecond one.\n\nThe nearly universal mathematical convention dictates the following\norder of operations (in order of which operators should be evaluated\nfirst):\n\n1.  Factorial.\n\n2.  Exponentiation.\n\n3.  Multiplication.\n\n4.  Division.\n\n5.  Addition.\n\nAny parenthesized expressions are automatically higher \u201cpriority\u201d than\nanything on the above list.\n\nThere is also the problem of what order to evaluate repeated operators\nof the same type, as in:\n\n$$a / b / c / d$$\n\nThe solution in this problem is typically to assume the left-to-right\ninterpretation. For the above, this would lead to the following\nevaluation:\n\n$$(((a/b)/c)/d)$$\n\nIn other words,\n\n1.  Evaluate $a / b$.\n\n2.  Evaluate (1)/$c$.\n\n3.  Evaluate (2)/$d$.\n\nNote that this isn\u2019t a problem for associative operators such as\nmultiplication or addition in the reals. One must still proceed with\ncaution, however, as associativity is a notion bound up with the concept\nof groups rather than just operators. Hence, context is extremely\nimportant.\n\nExponentiation is an exception to the left-to-right assumption, as it is\nevaluated right-to-left. That is, $a$\\^$b$\\^$c$ is computed as\n\n1.  Evaluate $b$\\^$c$.\n\n2.  Evaluate $a$\\^(1).\n\nOf course, this could also have been written as $a^{b^c}$, and in this\nform can be thought of as evaluated \u201chighest to lowest\u201d.\n\nFor more obscure operations than the ones listed above, parentheses\nshould be used to remove ambiguity. Completely new operations are\ntypically assumed to have the highest priority, but the definition of\nthe operation should be accompanied by some sort of explanation of how\nit is evaluated in relation to itself. For example, Conway\u2019s chained\narrow notation explicitly defines what order repeated applications of\nitself should be evaluated in (it is right-to-left rather than\nleft-to-right)!",
  "language": "INFORMAL",
  "phrase": "Order Of Operations",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/OrderOfOperations"
    }
  ],
  "indexable": true
}