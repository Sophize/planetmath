{
  "alternatePhrases": [],
  "definition": "[*Elliptic curve cryptography*]{} (ECC) is an approach to public-key\ncryptography based on the algebraic structure of elliptic curves over\nfinite fields. The use of elliptic curves in cryptography was suggested\nindependently by Neal Koblitz and Victor S. Miller in 1985.\n\nElliptic curves are also used in several integer factorization\nalgorithms that have applications in cryptography, such as, for\ninstance, Lenstra elliptic curve factorization, but this use of elliptic\ncurves is \u201dnot\u201d usually referred to as \u201celliptic curve cryptography.\u201d\n\nAn elliptic curve is a plane curve defined by an equation of the form\n$y^2 = x^3 + a x + b$.\n\nThe set of points on such a curve (i.e., all solutions of the equation\ntogether with a point at infinity) can be shown to form an abelian group\n(with the point at infinity as identity element). If the coordinates $x$\nand $y$ are chosen from a large finite field, the solutions form a\nfinite abelian group. The discrete logarithm problem on such elliptic\ncurve groups is believed to be more difficult than the corresponding\nproblem in (the multiplicative group of nonzero elements of) the\nunderlying finite field. Thus keys in elliptic curve cryptography can be\nchosen to be much shorter for a comparable level of security.\n\nAs for other popular public key cryptosystems, no mathematical proof of\ndifficulty has been published for ECC as of 2006. However, the U.S.\nNational Security Agency has endorsed ECC technology by including it in\nits Suite B set of recommended algorithms. Although the RSA patent has\nexpired, there are patents in force covering some aspects of ECC.\n\nElliptic curves used in cryptography are typically defined over two\ntypes of finite fields: fields of odd characteristic ($\\mathbb{F}_p$,\nwhere $p > 3$ is a large prime number) and fields of characteristic two\n($\\mathbb{F}_{2^m}$). When the distinction is not important we denote\nboth of them as $\\mathbb{F}_q$, where $q = p$ or $q = 2^m$. In\n$\\mathbb{F}_p$ the elements are integers ($0 \\le x < p$) which are\ncombined using modular arithmetic. The case of $\\mathbb{F}_{2^m}$ is\nslightly more complicated (see finite field arithmetic for details): one\nobtains different representations of the field elements as bitstrings\nfor each choice of irreducible binary polynomial $f(x)$ of degree $m$.\nBut it is perfectly possible to construct elliptic curves using other\nfinite fields. Specifically, finite fields of order $p^m$ where $p$ is a\nprime are possible. Some optimized implementations have a field of\ncharacteristic 3. Large finite fields with moderate size odd\ncharacteristics are also known to be convenient for implementation on\npersonal computers. These are known as Optimal Extension Fields (OEFs).\nIn an OEF, a prime $p$ is chosen to be a prime that is slightly smaller\nthan the word size of the computer. This makes computation particularly\nfast because one can use the built in arithmetic operations to perform\nthe computation.\n\nThe set of all pairs of affine coordinates $(x, y)$ for\n$x, y \\in \\mathbb{F}_q$ form the affine plane\n$\\mathbb{F}_q \\times \\mathbb{F}_q$. An elliptic curve is the locus of\npoints in the affine plane whose coordinates satisfy a certain cubic\nequation together with a point at infinity $O$ (the point at which the\nlocus in the projective plane intersects the line at infinity). In the\ncase of characteristic p &gt; 3 the \u201ddefining equation\u201d of\n$E(\\mathbb{F}_p)$ can be written: $y^2 = x^3 + a x + b\\, $ where\n$a \\in \\mathbb{F}_p$ and $b \\in \\mathbb{F}_p$ are constants such that\n$4 a^3 + 27 b^2 \\ne 0$. In the binary case the defining equation of\n$E(\\mathbb{F}_{2^m})$ can be written: $y^2 + x y = x^3 + a x^2 + b \\, $\nwhere $a \\in \\mathbb{F}_{2^m}$ and $b \\in \\mathbb{F}_{2^m}$ are\nconstants and $b \\ne 0$. Although the point at infinity $O$ has no\naffine coordinates, it is convenient to represent it using a pair of\ncoordinates which do not satisfy the defining equation, for example,\n$O = (0, 0)$ if $b \\ne 0$ and $O = (0, 1)$ otherwise. According to\nHasse\u2019s theorem on elliptic curves the number of points on a curve is\nclose to the size of the underlying field; more precisely:\n$(\\sqrt q - 1)^2 \\leq |E(\\mathbb{F}_q)| \\leq (\\sqrt q + 1)^2$.\n\nThe points on an elliptic curve form an abelian group\n$(E(\\mathbb{F}), +)$ with $O$, the distinguished point at infinity,\nplaying the role of additive identity. In other words, given two points\n$P, Q \\in E(\\mathbb{F}_q)$, there is a third point, denoted by $P+Q \\, $\non $E(\\mathbb{F}_q)$, and the following relations hold for all\n$P, Q, R \\in E(\\mathbb{F}_q)$\n\n$P + Q = Q+P$ (commutativity)\n\n$(P + Q) + R = P + (Q + R)$ (associativity) $P + O = O + P = P$\n(existence of an identity element)\n\nThere exists $(-P)$ such that $-P + P = P + (-P) = O$ (existence of\ninverses)\n\nWe already specified how $O$ is defined. If we define the negative of a\npoint $P = (x, y)$ to be $-P = (x, -y)$ for $P \\in E(\\mathbb{F}_p)$ and\n$-P = (x, x+y)$ for $P \\in E(\\mathbb{F}_{2^m})$, we can define the\naddition operation as follows:\n\nif $Q = O$ then $P + Q = P$\n\nif $Q = -P$ then $P + Q = O$\n\nif $Q \\ne P$ then $P + Q = R$, where in the prime case\n$x_R = \\lambda^2 - x_P - x_Q$, $y_R = \\lambda(x_P - x_R) - y_P$, and\n$\\lambda = \\frac{y_Q-y_P}{x_Q-x_P}$, or in the binary case\n$x_R = \\lambda^2 + \\lambda + x_P + x_Q + a$,\n$y_R = \\lambda (x_P + x_R) + x_R + y_P$, and\n$\\lambda = \\frac{y_P + y_Q}{x_P + x_Q}$ (Geometrically, $P + Q$ is the\ninverse of the third point of intersection of the cubic with the line\nthrough $P$ and $Q$.)\n\nIf $Q = P$ then $P + Q = R$, where in the prime case\n$x_R = \\lambda^2 - 2 x_P$, $y_R = \\lambda(x_P - x_R) - y_P$, and\n$\\lambda = \\frac{3 x_P^2 + a}{2 y_P}$, or in the binary case\n$x_R = \\lambda^2 + \\lambda + a$, $y_R = x_P^2 + (\\lambda + 1) x_R$, and\n$\\lambda = x_P + \\frac{y_P}{x_P}$ (Geometrically, $2P$ is the inverse of\nthe third point of intersection of the cubic with its tangent line at\n$P$.)\n\nWe already described the underlying field $\\mathbb{F}_q$ and the group\nof points of elliptic curve $E(\\mathbb{F}_q)$ but there is yet another\nmathematical structure commonly used in cryptography \u00c3\u00a2 a cyclic\nsubgroup of $E(\\mathbb{F}_q)$. For any point $G$ the set\n$(O, G, G+G, G+G+G, G+G+G+G, \\ldots)$ is a cyclic group. It is\nconvenient to use the following notation: $0 G = O$, $1 G = G$,\n$2G = G+G$, $3G = G+G+G$, etc. The calculation of $k G$, where $k$ is an\ninteger and $G$ is a point, is called \u201dscalar multiplication\u201d.\n\nSince the (additive) cyclic group described above can be considered\nsimilar to the (multiplicative) group of powers of an integer $g$ modulo\nprime $p$: $(g^0, g, g^2, g^3, g^4, \\ldots)$, the problem of finding $k$\ngiven points $k G$ and $G$ is called the elliptic curve discrete\nlogarithm problem (ECDLP). The assumed hardness of several problems\nrelated to the discrete logarithm in the subgroup of $E(\\mathbb{F}_q)$\nallows cryptographic use of elliptic curves. Most of the elliptic curve\ncryptographic schemes are related to the discrete logarithm schemes\nwhich were originally formulated for usual modular arithmetic: the\nElliptic Curve Diffie-Hellman key agreement scheme is based on the\nDiffie-Hellman scheme; the Elliptic Curve Digital Signature Algorithm is\nbased on the Digital Signature Algorithm; the ECMQV key agreement scheme\nis based on the MQV key agreement scheme.\n\nNot all the DLP schemes should be ported to the elliptic curve domain.\nFor example, the well known ElGamal encryption scheme was never\nstandardized by official bodies and should not be directly used over an\nelliptic curve (the standard encryption scheme for ECC is called\nElliptic Curve Integrated Encryption Scheme). The main reason is that\nalthough it is straightforward to convert an arbitrary message (of\nlimited length) to an integer modulo $p$, it is not that simple to\nconvert a bitstring to a point of a curve (not for every $x$ there is an\n$y$ such that $(x, y) \\in E(\\mathbb{F}_q)$). (Another factor is that\nElGamal scheme is vulnerable to chosen-ciphertext attacks.)\n\nTo use ECC all parties must agree on all the elements defining the\nelliptic curve, that is domain parameters of the scheme. The field is\ndefined by $p$ in the prime case and the pair of $m$ and $f$ in the\nbinary case. The elliptic curve is defined by the constants $a$ and $b$\nused in its defining equation. Finally, the cyclic subgroup is defined\nby its generator or base point $G$. For cryptographic application the\norder of $G$, that is the smallest non-negative number $n$ such that\n$n G = O$, must be prime. Since $n$ is the size of a subgroup of\n$E(\\mathbb{F}_q)$ it follows from the Lagrange\u2019s theorem that the number\n$h = \\frac{|E|}{n}$ is integer. In cryptographic applications this\nnumber $h$, called cofactor, at least must be small ($h \\le 4$) and,\npreferably, $h = 1$. Let us summarize: in the prime case the domain\nparameters are $(p, a, b, G, n, h)$ and in the binary case they are\n$(m, f, a, b, G, n, h)$.\n\nUnless there is an assurance that domain parameters were generated by a\nparty trusted with respect to their use, the domain parameters \u201dmust\u201d be\nvalidated before use. The generation of domain parameters is not usually\ndone by each participant since this involves counting the number of\npoints on a curve which is time-consuming and troublesome to implement.\nAs a result several standard bodies published domain parameters of\nelliptic curves for several common field sizes, NIST and SECG being the\nmost important.\n\nIf one (despite the said above) wants to build his own domain parameters\nhe should select the underlying field and then use one of the following\nstrategies to find a curve with appropriate (i.e., near prime) number of\npoints using one of the following methods:\n\nSelect a random curve and use a general point-counting algorithm, for\nexample, Schoof\u2019s algorithm or Schoof-Elkies-Atkin algorithm,\n\nSelect a random curve from a family which allows easy calculation of the\nnumber of points (e.g., Koblitz curves), or Select the number of points\nand generate a curve with this number of points using \u201dcomplex\nmultiplication\u201d technique.\n\nSeveral classes of curves are weak and shall be avoided:\n\nCurves over $\\mathbb{F}_{2^m}$ with non-prime $m$ are vulnerable to Weil\ndescent attacks.\n\nCurves such that $n$ divides $p^B-1$ (where $p$ is the characteristic of\nthe field $-q$ for a prime field, or $2$ for a binary field) for\nsufficiently small $B$ are vulnerable to MOV attack which applies usual\nDLP in a small degree extension field of $\\mathbb{F}_p$ to solve ECDLP.\nThe bound $B$ should be chosen so that discrete logarithms in the field\n$\\mathbb{F}_{p^B}$ are at least as difficult to compute as discrete logs\non the elliptic curve $E(\\mathbb{F}_q)$.\n\nCurves such that $|E(\\mathbb{F}_q)| = q$ are vulnerable to the attack\nthat maps the points on the curve to the additive group of\n$\\mathbb{F}_q$\n\nSince all the fastest known algorithms that allow to solve the ECDLP\n(baby-step giant-step, Pollard\u2019s rho, etc.), need $O(\\sqrt{n})$ steps,\nit follows that the size of the underlying field shall be roughly twice\nthe security parameter. For example, for 128-bit security one needs a\ncurve over $\\mathbb{F}_q$, where $q \\approx 2^{256}$. This can be\ncontrasted with finite-field cryptography (e.g., DSA) which requires\n3072-bit public keys and 256-bit private keys, and integer factorization\ncryptography (e.g., RSA) which requires 3072-bit public and private\nkeys. The hardest ECC scheme (publicly) broken to date had a 109-bit key\n(that is about 55 bits of security). For the prime field case, it was\nbroken near the beginning of 2003 using over 10, 000 Pentium class PCs\nrunning continuously for over 540 days . For the binary field case, it\nwas broken in April 2004 using 2600 computers for 17 months.\n\nA close examination of the addition rules shows that in order to add two\npoints one needs not only several additions and multiplications in\n$\\mathbb{F}_q$ but also an inversion operation. The inversion (for given\n$x \\in \\mathbb{F}_q$ find $y \\in \\mathbb{F}_q$ such that $x y = 1$) is\none to two orders of magnitude slower than multiplication. Fortunately,\npoints on a curve can be represented in different coordinate systems\nwhich do not require an inversion operation to add two points. Several\nsuch systems were proposed: in the \u201dprojective\u201d system each point is\nrepresented by three coordinates $(X, Y, Z)$ using the following\nrelation: $x = \\frac{X}{Z}$, $y = \\frac{Y}{Z}$; in the Jacobian\u201d system\na point is also represented with three coordinates $(X, Y, Z)$, but a\ndifferent relation is used: $x = \\frac{X}{Z^2}$, $y = \\frac{Y}{Z^3}$; in\nthe modified Jacobian system the same relations are used but four\ncoordinates are stored and used for calculations $(X, Y, Z, aZ^4)$; and\nin the Chudnovsky Jacobian system five coordinates are used\n$(X, Y, Z, Z^2, Z^3)$. Note that there are may be different naming\nconventions, for example, IEEE P1363-2000 standard uses projective\ncoordinates to refer to what is commonly called Jacobian coordinates. An\nadditional speed-up is possible if mixed coordinates are used.\n\nReduction modulo $p$ (which is needed for addition and multiplication)\ncan be executed much faster if the prime $p$ is a pseudo-Mersenne prime\nthat is $p \\approx 2^d$, for example, $p = 2^{521} - 1$ or\n$p = 2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1$. Compared to\nBarrett reduction there can be an order of magnitude speed-up. The\ncurves over $\\mathbb{F}_p$ with pseudo-Mersenne $p$ are recommended by\nNIST. Yet another advantage of the NIST curves is the fact that they use\n$a = -3$ which improves addition in Jacobian coordinates.\n\nUnlike DLP systems (where it is possible to use the same procedure for\nsquaring and multiplication) the EC addition is significantly different\nfor doubling ($P = Q$) and general addition ($P \\ne Q$). Consequently,\nit is important to counteract side channel attacks (e.g., timing and\nsimple power analysis attacks) using, for example, fixed pattern window\n(aka. comb) methods (note that this does not increase the computation\ntime).\n\nMost of ECC (e.g., ECDH, ECIES, ECDSA) is not encumbered by patents\nwhereas some other schemes (ECMQV) and some implementation techniques\nare covered. See ECC patents for details.\n\n[*This entry was adapted from the Wikipedia article as of April 28,\n2007.*]{}\n\n[7]{} N. Koblitz, \u201cElliptic curve cryptosystems\u201d, in [*Mathematics of\nComputation*]{} [**48**]{}, (1987): 203 - 209 V. Miller, \u201cUse of\nelliptic curves in cryptography\u201d, [*CRYPTO 85*]{} (1985) S.D. Galbraith\n& N.P. Smart, \u201cA cryptographic application of the Weil descent\u201d,\n[*Cryptography and Coding*]{} (1999) A. Menezes, T. Okamoto, & S.A.\nVanstone, \u201cReducing elliptic curve logarithms to logarithms in a finite\nfield\u201d, [*IEEE Transactions on Information Theory*]{} [**39**]{} (1993)\nI. Semaev, \u201cEvaluation of discrete logarithm in a group of P-torsion\npoints of an elliptic curve in characteristic $P$\u201d, [*Mathematics of\nComputation*]{}, [**67**]{} (1998)",
  "language": "INFORMAL",
  "phrase": "Elliptic Curve Cryptography",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/EllipticCurveCryptography"
    }
  ],
  "indexable": true
}