{
  "alternatePhrases": [
    "NDFA"
  ],
  "definition": "A non-deterministic finite automaton (or NDFA) can be formally defined\nas a 5-tuple $(S, \\Sigma, \\delta, q_0, F)$, where\n\n1.  $S$ is a non-empty finite set of *states*,\n\n2.  $\\Sigma$ is the alphabet (defining what set of input strings the\n    automaton operates on),\n\n3.  $\\delta : S\\times \\Sigma \\rightarrow\\mathcal{P}(S)$ is a function\n    called the *transition function*,\n\n4.  $q_0\\in Q$ is the starting state, and\n\n5.  $F\\subseteq S$ is a set of final (or accepting) states.\n\nSome authors also relax the fourth condition by permitting multiple\nstarting states (see remark below).\n\nNote how this definition differs from that of a deterministic finite\nautomaton (DFA) only by the definition of the transition function\n$\\delta$. Operation of the NDFA begins at $q_0$, and movement from state\nto state is governed by the transition function $\\delta$.\n\nThe transition function takes the first symbol of the (remaining) input\nstring and the current state as its input, and after the transition this\nfirst symbol is removed only if the transition is defined for a symbol\nin $\\Sigma$ instead of $\\lambda$. Conceptually, all possible transitions\nfrom a current state are followed *simultaneously* (hence the\nnon-determinism). Once every possible transition has been executed, the\nNDFA is halted. If any of the states reached upon halting are in $F$ for\nsome input string, *and* the entire input string is consumed to reach\nthat state, then the NDFA accepts that string.\n\nAn NDFA can be represented visually as a directed graph called the state\ndiagram. Circular vertices denote states, and the set of directed edges,\nlabelled by symbols in $\\Sigma\\cup\\lambda$, denotes $T$. The starting\nstate $q_0$ is usually denoted by an arrow pointing to it that points\nfrom no other vertex. States in $F$ are usually denoted by double\ncircles.\n\nNDFAs accept regular languages, and can be used to test whether any\nstring in $\\Sigma^*$ is in the language it represents. Given an NDFA\n$M$, the language accepted by $M$ is denoted by $L(M)$.\n\nConsider the following regular language over the alphabet\n$\\Sigma := \\left\\{ \\verb*.a., \\verb*.b. \\right\\}$ (represented by the\nregular expression `aa*b`):\n\n$$\\begin{aligned}\n\\verb.<.S\\verb.>. & \\verb.::=. & \\verb=a=\\,A \\\\\n\\verb.<.A\\verb.>. & \\verb.::=. & \\lambda\\,B\\,\\verb.|.\\,\\verb=a=\\,A \\\\\n\\verb.<.B\\verb.>. & \\verb.::=. & \\verb=b=\\end{aligned}$$\n\nThis language can be represented by the NDFA with state diagram:\n\n$$\\UseComputerModernTips\n\\xymatrix{\n\\ar[r] &\n*+[o][F-]{0} \\ar[r]_a &\n*+[o][F-]{1} \\ar@(r,u)[]^a \\ar[r]_\\lambda &\n*+[o][F-]{2} \\ar[r]_b &\n*++[o][F=]{3}}$$\n\nThe vertex 0 is the initial state $q_0$, and the vertex 3 is the only\nstate in $F$.\n\nIf given the string `aaab` as input, operation of the NDFA is as\nfollows. Let $X\\subseteq S\\times\\Sigma^*$ indicate the set of \u201ccurrent\u201d\nstates and the remaining input associated with them. Initially\n$$X := \\left\\{ (0, \\verb=aaab=) \\right\\}.$$ For state 0 with a leading\n`a` as its input, the only possible transition to follow is to 1 (which\nconsumes the `a`). This transforms $X$ to\n$$\\left\\{ (1, \\verb=aab=) \\right\\}.$$ Now there are two possible\ntransitions to follow for state 1 with a leading `a`. One transition is\nback to 1, consuming the `a`, while the other is to 2, leaving the `a`.\nThus $X$ is then $$\\left\\{ (1, \\verb=ab=), (2, \\verb=aab=) \\right\\}.$$\nAgain, the same transitions are possible for state 1, while no\ntransition at all is available for state 2 with a leading `a`, so $X$ is\nthen\n$$\\left\\{ (1, \\verb=b=), (2, \\verb=aab=), (2, \\verb=ab=) \\right\\}.$$ At\nthis point, there is still no possible transition from 2, and the only\npossible transition from 1 is to 2 (leaving the input string as it is).\nThis then gives\n$$\\left\\{ (2, \\verb=aab=), (2, \\verb=ab=), (2, \\verb=b=) \\right\\}.$$\nOnly state 2 with remaining input of `b` has a transition leading from\nit, giving\n$$\\left\\{ (2, \\verb=aab=), (2, \\verb=ab=), (3, \\lambda) \\right\\}.$$ At\nthis point no further transitions are possible, and so the NDFA is\nhalted. Since 3 is in $F$, and the input string can be reduced to\n$\\lambda$ when it reached 3, the NDFA accepts `aaab`.\n\nIf the input string were instead `aaaba`, processing would occur as\nbefore until\\\n$$\\left\\{ (2, \\verb=aaba=), (2, \\verb=aba=), (3, \\verb=a=) \\right\\}$$ is\nreached and the NDFA halts. Although 3 is in $F$, it is not possible to\nreduce the input string completely before reaching 3. Therefore `aaaba`\nis *not* accepted by this NDFA.\n\nAny regular grammar can be represented by an NDFA. Any string accepted\nby the NDFA is in the language represented by that NDFA. Furthermore, it\nis a straight-forward process to generate an NDFA for any regular\ngrammar. Actual operation of an NDFA is generally intractable, but there\nis a simple process to transform any NDFA into a DFA, the operation of\nwhich is very tractable. Regular expression matchers tend to operate in\nthis manner.\n\n**Remarks**.\n\n-   Instead of a single starting state, one may more generally consider\n    an NDFA $M$ with a set $I$ of starting states. However, this is not\n    necessary, as an NDFA $M'$ with a single starting state can be\n    constructed from $M$ such that $L(M')=L(M)$. This is done by adding\n    an extra symbol $\\sigma$ not in the state set $Q$ of $M$, and using\n    it as the starting state of $M'$. Additionally, the transition\n    function $T'$ of $M'$ extends the transition function $T$ of $M$\n    such that $T'(\\sigma,a)=I$ for all $a\\in \\Sigma\\cup \\lambda$.\n\n-   Another possible generalization is to include the so-called .\n    Nevertheless, it can be shown that any NDFA with\n    $\\epsilon$-transitions is equivalent to one without any\n    $\\epsilon$-transitions.",
  "language": "INFORMAL",
  "phrase": "Non-Deterministic Finite Automaton",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/NondeterministicFiniteAutomaton"
    }
  ],
  "indexable": true
}