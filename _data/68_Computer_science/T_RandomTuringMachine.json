{
  "alternatePhrases": [],
  "definition": "A random Turing machine is defined the same way as a non-deterministic\nTuring machine, but with different rules governing when it accepts or\nrejects. Whenever there are multiple legal moves, instead of always\nguessing right, a random machine selects one of the possible moves at\nrandom.\n\nAs with non-deterministic machines, this can also be viewed as a\ndeterministic machine with an extra input, which corresponds to the\nrandom selections.\n\nThere are several different ways of defining what it means for a random\nTuring machine to accept or reject an input. Let\n$\\operatorname{Prob}_T(x)$ be the probability that $T$ halts in an\naccepting state when the input is $x$.\n\nA positive *one-sided error* machine is said to accept $x$ if\n$\\operatorname{Prob}_T(x)\\geq\\frac{1}{2}$ and to reject $x$ if\n$\\operatorname{Prob}_T(x)=0$. A negative one-sided error machine accepts\n$x$ if $\\operatorname{Prob}_T(x)=1$ and rejects $x$ if\n$\\operatorname{Prob}_T(x)\\leq\\frac{1}{2}$. So a single run of a positive\none-sided error machine never misleadingly accepts but may misleadingly\nreject, while a single run of a negative one-sided error machine never\nmisleadingly rejects.\n\nThe definition of a positive one-sided error machine is stricter than\nthe definition of a non-deterministic machine, since a non-deterministic\nmachine rejects when there is no certificate and accepts when there is\nat least one, while a positive one-sided error machine requires that\nhalf of all possible guess inputs be certificates.\n\nA *two-sided error* machine accepts $x$ if\n$\\operatorname{Prob}_T(x)\\geq\\frac{2}{3}$ and rejects $x$ if\n$\\operatorname{Prob}_T(x)\\leq\\frac{1}{3}$.\n\nThe constants in any of the definitions above can be adjusted, although\nthis will affect the time and space complexity classes.\n\nA *minimal error* machine accepts $x$ if\n$\\operatorname{Prob}_T(x)>\\frac{1}{2}$ and rejects $x$ if\n$\\operatorname{Prob}_T(x)<\\frac{1}{2}$.\n\nOne additional variant defines, in addition to accepting states,\nrejecting states. Such a machine is called *zero error* if on at least\nhalf of all inputs it halts in either an accepting or a rejecting state.\nIt accepts $x$ if there is any sequence of guesses which causes it to\nend in an accepting state, and rejects if there is any sequence of\nguesses which causes it to end in a rejecting state. In other words,\nsuch a machine is never wrong when it provides an answer, but does not\nproduce a decisive answer on all input. The machine can emulate a\npositive (resp. negative) one-sided error machine by accepting (resp.\nrejecting) when the result is indecisive.\n\nIt is a testament to the robustness of the definition of the Turing\nmachine (and the Church-Turing thesis) that each of these definitions\ncomputes the same functions as a standard Turing machine. The point of\ndefining all these types of machines is that some are more efficient\nthan others, and therefore they define different time and space\ncomplexity classes.",
  "language": "INFORMAL",
  "phrase": "Random Turing Machine",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/RandomTuringMachine"
    }
  ],
  "indexable": true
}