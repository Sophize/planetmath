{
  "alternatePhrases": [
    "LBA",
    "NLBA",
    "DLBA",
    "deterministic LBA"
  ],
  "definition": "A *linear bounded automaton*, or LBA for short, is a restricted form of\na non-deterministic Turing machine with a single tape and a single tape\nhead, such that, given an input word on the tape, the tape head can only\nscan and rewrite symbols on the cells occupied by the initial input\nword.\n\nFormally, a *linear bounded automaton* is a 9-tuple\n$M=(Q,\\Sigma,\\Gamma,\\delta,q_0,B,F,\\Yleft,\\Yright)$, where\n\n1.  $Q$ is the state alphabet\n\n2.  $\\Sigma$ is the input alphabet\n\n3.  $\\Gamma$ is the tape alphabet and $\\Sigma\\subset\\Gamma$\n\n4.  $\\Yleft,\\Yright \\in \\Sigma$ are the left and right end markers.\n\n5.  $\\delta$ is a function from $Q\\times \\Gamma$ to\n    $P(Q\\times \\Gamma\\times \\lbrace L,R\\rbrace)$, called the *next move\n    function*\n\n6.  $q_0\\in Q$ is the start state\n\n7.  $B\\in \\Gamma-\\Sigma$ is the blank symbol\n\n8.  $F\\subset Q$ is the set of final states\n\nThe interpretation of $(q,b,D)\\in \\delta(p,a)$ is the same as that of a\nnon-deterministic TM: if the $M$ is in state $p$ and the tape head is\nreading a tape cell containing $a$, then it replaces $a$ by $b$ in that\ntape cell, and move in the direction of $D$ ($D=L$ for left, and $D=R$\nfor right), and changes its state to $q$. In addition, the next move\nfunction $\\delta$ has the following properties:\n\n-   if $(q,b,D)\\in \\delta(p,\\Yleft)$, then $b=\\Yleft$ and $D=R$, and\n\n-   if $(q,b,D)\\in \\delta(p,\\Yright)$, then $b=\\Yright$ and $D=L$.\n\n-   if $(q,b,D)\\in \\delta(p,a)$ and\n    $a\\notin \\lbrace \\Yleft, \\Yright\\rbrace$, then\n    $b \\notin \\lbrace \\Yleft, \\Yright\\rbrace$.\n\nIn other words, if the tape head is reading the left end marker\n$\\Yleft$, then if it has a next move, it can only move right without\nreplacing the end marker $\\Yleft$. Similarly, if it is reading the right\nend marker $\\Yright$, then it can only move left if it has any next move\nat all, without replacing $\\Yright$. Furthermore, no symbol can be\nreplaced by an end marker unless the symbol itself is the end marker.\n\nAn LBA is also known as a non-deterministic LBA, or NLBA for short. An\nLBA is said to be *deterministic* (abbreviated as DLBA) if $\\delta(p,a)$\nis at most a singleton for every pair $(p,a)\\in Q\\times \\Gamma$.\n\nA configuration of $M$ is a triple $(p,u,i)$, where $p\\in Q$ is the\ncurrent state of $M$,\n$u\\in \\lbrace \\Yleft \\rbrace \\Gamma^* \\lbrace \\Yright \\rbrace$ is the\ncontent of the tape (including the end markers), and $i$ a non-negative\ninteger, the position of the tape head, where $i=0$ is the position of\n$\\Yleft$, the left end marker.\n\nDefine a binary relation $\\Rightarrow$ on the set of all configurations\nof $M$: for $a_i,b\\in \\Gamma$,\n$$(p,a_0\\cdots a_{i-1} a a_{i+1} \\cdots a_{n+1},i)\\Rightarrow (q,a_0 \\cdots a_{i-1} b a_{i+1} \\cdots a_{n+1},j),$$\nwhere $i=1,\\ldots,n$ and $n$ a non-negative integer, iff any one of the\nfollowing holds:\n$$(q,b,L)\\in \\delta(p,a_i)\\mbox{ and }j=i-1 \\qquad \\mbox{or} \\qquad (q,b,R)\\in \\delta(p,a_i)\\mbox{ and }j=i+1.$$\nNotice that $a_0=\\Yleft$ and $a_{n+1}=\\Yright$. If $i=0$, then the\nformer case can not happen, and if $i=n+1$, then the latter case can not\nhappen.\n\nTake the reflexive transitive closure $\\Rightarrow^*$ of $\\Rightarrow$,\nand set\n$$L(M):=\\lbrace u\\in \\Sigma^* \\mid (q_0,\\Yleft u \\Yright, 0)\\Rightarrow^* (q,\\Yleft v \\Yright,j) \\mbox{ for some } q\\in F\\rbrace$$\nthe language accepted by $M$.\n\n**Remarks**\n\n-   For a given input word $u$, the workspace $w(u)$ of an LBA is\n    defined as the portion of the tape between the end markers\n    (including the end markers). In the definition above, we see that\n    $|w(u)|=|u|+2$, where $|\\cdot|$ is the length function. One can\n    enlarge the workspace so that $|w(u)|=r|u|+s$, where $r,s$ are\n    positive integers with $r\\ge 1$ and $s\\ge 2$. This is the reason for\n    the name \u201clinear bounded\u201d in LBA. However, the computational power\n    of an LBA with enlarged workspace is not increased: the language\n    accepted by such an LBA can be accepted by an LBA defined above.\n\n-   A language is context-sensitive iff it can be accepted by an LBA.\n\n-   Every context-free language can be accepted by a DLBA, but not\n    conversely.\n\n-   It is an open question whether every context-sensitive language can\n    be accepted by a DLBA.\n\n[9]{} J.E. Hopcroft, J.D. Ullman, [*Formal Languages and Their Relation\nto Automata*]{}, Addison-Wesley, (1969).",
  "language": "INFORMAL",
  "phrase": "Linear Bounded Automaton",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LinearBoundedAutomaton"
    }
  ],
  "indexable": true
}