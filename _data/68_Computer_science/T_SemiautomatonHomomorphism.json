{
  "alternatePhrases": [],
  "definition": "Just like groups and rings, a semiautomaton can be viewed as an\nalgebraic structure. As such, one may define algebraic constructs such\nas subalgebras and homomorphisms. In this entry, we will briefly discuss\nthe later.\n\n### Definition {#definition .unnumbered}\n\nA *homomorphism* from a semiautomaton $M=(S,\\Sigma,\\delta)$ to a\nsemiautomaton $N=(T,\\Gamma,\\gamma)$ is a pair of maps\n$h:=(f:S\\to T,g:\\Sigma \\to \\Gamma)$ such that\n$$f(\\delta(s,a))= \\gamma(f(s),g(a))$$ The *image* of the homomorphism\n$h$ is the subsemiautomaton $h(M):=(f(S),g(\\Sigma),\\gamma')$ of $N$,\nwhere $\\gamma'$ is the restriction of $\\gamma$ to\n$f(S)\\times g(\\Sigma)$, also known as the *homomorphic image* of $M$\nunder $h$.\n\nIn general, a semiautomaton $N$ is said to be a homomorphic image of a\nsemiautomaton $M$, if there is a homomorphism $h$ such that $h(M)=N$.\n\nWhen comparing two semiautomata $M,N$, it is customary to identify the\ntwo corresponding input alphabets $\\Sigma, \\Gamma$, especially when one\nwants to study the interaction between the states of $M$ and the states\nof $N$. This can be done by taking $\\Delta:=\\Sigma\\cup \\Gamma$, and\nextend the corresponding transition functions so that they are\nidentities on the extended portions of the input alphabets. Call the\nextended semiautomata $M',N'$.\n\nIf $h:M\\to N$ is a homomorphism, then $h':M'\\to N'$ extends $h$ in a\nnatural way: $f'=f$, and $g':\\Delta \\to \\Delta$ given by $g'(a)=g(a)$ if\n$a\\in \\Sigma$, and $g'(a)=a$ if $a\\in \\Gamma-\\Sigma$. Routine\nverification shows that $h'$ is indeed a homomorphism: if $a\\in \\Sigma$,\n$$f'(\\delta'(s,a))=f(\\delta'(s,a))=f(\\delta(s,a))=\\gamma(f(s),g(a))=\\gamma'(f(s),g(a))=\\gamma'(f'(s),g'(a)),$$\nand if $a\\in \\Gamma-\\Sigma$, then\n$$f'(\\delta'(s,a))=f(\\delta'(s,a))=f(s)=\\gamma'(f(s),a)=\\gamma'(f'(s),a)=\\gamma'(f'(s),g'(a)).$$\n\nA homomorphism $h=(f,g):M\\to N$ is an *isomorphism* if both $f$ and $g$\nare bijections. As discussed above, if we identify the input alphabets\nof $M$ and $N$, and treat $g$ as the identity map on the input alphabet,\nthen $(S,\\Sigma,\\delta)$ and $(T,\\Sigma,\\gamma)$ are isomorphic if there\nis a bijection $f:S\\to T$ such that $f(\\delta(s,a))=\\gamma(f(s),a)$.\n\n### Specializations to Other Machines {#specializations-to-other-machines .unnumbered}\n\nComputing devices derived from semiautomata such as automata and\nstate-output machines may also be considered as algebras. We record the\ndefinitions of homomorphisms with respect to these objects here.\n\nWe adopt the following notations: given an automaton\n$A=(S,\\Sigma,\\delta,I,F)$ and a state-output machine\n$M=(S,\\Sigma,\\Delta,\\delta,\\lambda)$, let $A'$ and $M'$ be the\nassociated semiautomaton $(S,\\Sigma,\\delta)$. So $A$ and $M$ may be\nwritten $(A',I,F)$ and $(M',\\Delta,\\lambda)$ respectively.\n\n**Definition (automaton)**. Given automata $A=(A',I,F)$ and\n$B=(B',J,G)$. Then $$h=(f,g):A\\to B$$ is a *homomorphism* if\n\n-   $h:A'\\to B'$ is a semiautomaton homomorphism, such that\n\n-   $f(I)\\subseteq J$, and $f(F)\\subseteq G$.\n\nA homomorphism $h:A\\to B$ is an isomorphism if $h:A'\\to B'$ is an\nisomorphism such that $f(I)=J$ and $f(F)=G$.\n\n**Definition (state-output machine)**. Given state-output machines\n$M=(M',\\Delta,\\lambda)$ and $N=(N',\\Omega,\\pi)$. Then\n$$\\phi=(h,k): M\\to N$$ is a homomorphism if\n\n-   $h:M'\\to N'$ is a semiautomaton homomorphism, and\n\n-   $k:\\Delta \\to \\Omega$, such that $$k(\\lambda(s,a))=\\pi(f(s),g(a)),$$\n    for all $(s,a)\\in S\\times \\Sigma$, where $S$ and $\\Sigma$ are the\n    state and input alphabets of $M$.\n\nA homomorphism $\\phi:A\\to B$ is an isomorphism if $h:M'\\to N'$ is an\nisomorphism and $k$ is a bijection.\n\n[8]{} A. Ginzburg, [*Algebraic Theory of Automata*]{}, Academic Press\n(1968).",
  "language": "INFORMAL",
  "phrase": "Semiautomaton Homomorphism",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/SemiautomatonHomomorphism"
    }
  ],
  "indexable": true
}