{
  "alternatePhrases": [
    "left linear",
    "right linear",
    "strong left linear",
    "strong right linear"
  ],
  "definition": "A formal grammar $G=(\\Sigma,N,P,\\sigma)$ is said to be *linear* if each\nof its productions has the form $A\\to x$, where $A$ is a non-terminal,\nand $x$ is a word over $\\Sigma$ containing no more than one occurrence\nof a non-terminal. In other words, a production in $G$ has one of the\nfollowing forms:\n\n1.  $A\\to \\lambda$ (the empty word)\n\n2.  $A\\to u$, where $u$ is a terminal word (over the set of terminal\n    symbols $\\Sigma-N$), or\n\n3.  $A\\to uBv$, where $u,v$ are terminal words, and $B$ is a\n    non-terminal symbol (in $N$).\n\nA langauge generated by a linear grammar is called a *linear language*.\n\nBy definition, any linear language is context-free. However, not all\ncontext-free languages are linear. A Dyck language is an example of a\nnon-linear context-free language.\n\nFurthermore, every regular language is linear, since any production of a\nregular grammar has one of the above three forms, except $v=\\lambda$ in\nthe last form. The converse is also not true. For example, the language\n$\\lbrace a^n b^n \\mid n \\ge 0\\rbrace$ is known to be not regular (apply\nthe pumping lemma), but it is linear, generated by the following\nproductions $\\sigma \\to \\lambda$, $\\sigma \\to a\\sigma b$.\n\nIt can be shown that a language is linear iff it can be generated by a\n1-turn pushdown automaton (once it starts popping, it never pushes\nagain).\n\nAs we have seen above, a regular grammar is a more restricted form of a\nlinear grammar. Various restrictions may be placed on a linear grammar\n$G$:\n\n-   $G$ is *right linear* if $v=\\lambda$ is the third form above (so a\n    regular grammar is also known as a right linear grammar)\n\n-   $G$ is *strong right linear* if it is right linear, and there are no\n    productions of the second form\n\n-   $G$ is *left linear* if $u=\\lambda$ in the third form above\n\n-   $G$ is *strong left linear* if it is left linear, and there are no\n    productions of the second form\n\nHowever, it can be shown that all of the restricted types of linear\ngrammars mentioned above are equivalent, in the sense that a language\ngenerated by one restricted type can be generated by all other\nrestricted types.\n\n**Remark**. Subfamilies of the family of linear languages can be formed\nby putting restrictions on the linear grammars. In some cases, the\nsubfamily formed properly sits between the family of regular languages\nand the family of linear languages. Here are some examples: let\n$G=(\\Sigma,N,P,\\sigma)$ be a linear grammar,\n\n-   $G$ is *minimal* if $N=\\lbrace \\sigma \\rbrace$, and there is exactly\n    one production of the form $\\sigma \\to a$, where $a\\in \\Sigma$ such\n    that $a$ occurs in no other productions. Therefore, if\n    $\\sigma \\to u$ is another production of $G$, then $u\\notin \\Sigma$,\n    and $a$ does not occur in $u$.\n\n-   $G$ is *even* if every production having the third form above\n    ($A\\to uBv$) has the property that $|u|=|v|$ (same length). It can\n    be shown that every regular language can be generated by an even\n    linear grammar, and that the converse is not true.\n\n-   $G$ is *deterministic* if every production has the form $A\\to aW$,\n    where $a\\in \\Sigma-N$, and $W$ is either the empty word $\\lambda$,\n    or in $N(\\Sigma-N)^*$. Furthermore, every\n    $(A,a)\\in N\\times (\\Sigma-N)$ corresponds to at most one production.\n\n[9]{} S. Ginsburg, [*The Mathematical Theory of Context-Free\nLanguages*]{}, McGraw-Hill, New York (1966). H.R. Lewis, C.H.\nPapadimitriou, [*Elements of the Theory of Computation*]{}.\nPrentice-Hall, Englewood Cliffs, New Jersey (1981). J.E. Hopcroft, J.D.\nUllman, [*Formal Languages and Their Relation to Automata*]{},\nAddison-Wesley, (1969).",
  "language": "INFORMAL",
  "phrase": "Linear Language",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LinearLanguage"
    }
  ],
  "indexable": true
}