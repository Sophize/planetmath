{
  "alternatePhrases": [],
  "definition": "[*Java*]{} is a software platform intended to modernize programming on a\nuniversal scale. The chief inventor was James Gosling working for Sun\nMicrosystems which has retained the governance of the Java platform\nspecifications. A strong community of other companies and users has\ndeveloped and affected the development chiefly IBM and Apple.\n\nGosling\u2019s hope for development on the platform was encompassed in the\nslogan\n\n> \u201cWrite once, run anywhere.\u201d\n\nUnfortunately, the realization has often followed the mocking slogan:\n\n> \u201cWrite once, debug everywhere.\u201d\n\nThe name Java is a reference to coffee but was not the original name\ndesired by Gosling.\n\nThe platform\n============\n\nThe platform is comprised of several levels of abstraction.\n\n-   Every Java platform operates with a core kernel which is designed\n    and implemented for specific physical settings. There are Java\n    kernels targeted for multiprocessor Sparc and Itanium server\n    environments all the way down to StrongArm and even Smart-Card\n    chips. IBM has even prototype processors equipped to operate as\n    solid state Java kernels. Access to this layer from the other\n    platforms is achieved through `jave.lang` packages as well as\n    through the Java Native Interface.\n\n    The simplest method to create a kernel is to build an interpreter in\n    the language and tools of a given operating system, such as\n    Microsoft Windows, Apple\u2019s OS-X, and various Linux and Unix\n    distributions. This unnecessary layer is generally responsible for\n    slower performance on time critical tasks and may be responsible for\n    much of the limited adoption of platform for large scale home or\n    office applications.\n\n    The most notable divergence of the kernel from C style applications\n    is garbage collection. Memory in Java is managed completely by the\n    kernel and so programmers cannot use dangerous tricks such as\n    incrementing or decrementing pointers beyond the bounds of the array\n    or structure allocated to pointer. However, by retaining deletion\n    controls, some critical optimizations may not be able release\n    resources when desired.\n\n-   The second layer is the programming language and its suite of\n    standard packages. The language uses the C syntax but unlike C++\n    makes an explicit use of object oriented structures. The concept of\n    exceptions, experimentally introduced in C++, is given a robust form\n    thus removing the need to check returns for errors. An error in Java\n    reverses the execution direction of the thread \u201cthrowing\u201d exception\n    to the calling functions until some layer is capable of handling the\n    error. An unexpected result of this is that some programs now use\n    the exception mechanism as a valid exit strategy from a loop of\n    recursion thus in effect providing for an unbounded number of types\n    as the result of a method invocation.\n\n    The language has single inheritance but allows for polymorphism\n    through interface structures. This avoids the danger of C++ multiple\n    inheritance.\n\n    The various packages, for example: `java.util`, `java.awt`,\n    `java.net`, etc. provide uniform access to standard features of most\n    hardware systems. For example, data structures such as lists, trees,\n    queue, etc. are provided in the utility package. AWT controls\n    standard windowing controls which allows for elegant and simply\n    built graphical user interfaces. Packages such as the net package\n    provide very direct methods to access internet controls (TCP/IP\n    stacks) and provide conversions between various formats on the web.\n    This makes network applications very favorable as there is no\n    concern over which operating systems are linked together through the\n    programs.\n\n-   At the most abstract layer to the platform are the extended\n    packages. These include packages to control databases, XML\n    utilities, 3-D packages, speech and natural language, and perhaps\n    the most comprehensive dedication to accessibility and\n    internationalization.\n\nThe standards\n=============\n\nHaving developed the Java platform from the ground up there was a rare\nopportunity to establish conventions to form a uniform development look\nwhich would promote ease of development. Data types are named with a\ncapital letter for each new word or initial. For example, the data\nstructure encoding a list is written `List`. The exception to this rule\nare the primitive data types of integers, floating points, etc. These\nare written `int`, `long`, `boolean`, etc.\n\nIn contrast, variables (references) begin with a lower case but may have\nupper case letters for subsequent words or initials. For example, an\ninstance of an object `LargeInteger` could be named `largeInt`.\n\nUnlike the Microsoft Hungarian notation, references are not labeled with\nshort hand letters revealing their type. Because Java is a strongly\ntyped programming language, much of the type problems of C/C++ solved by\nHungarian notation is unnecessary as the problems are caught at compile\ntime. The trade off is the inflexibility of programming in that data\nmust be explicitly cast to the appropriate data type even when provably\nclear in the program. Later languages, such as Python, are in sharp\ncontrast to Java in this regard.\n\nAt larger level, the names of new packages carry with them the website\nnames of the developers. For example `com.sun.java.swing` or\n`com.ibm.java.speech` are packages from Sun Microsystems and IBM, as is\neasily detected in the package names. Linking between libraries is thus\nsimply a matter of identifying the package name and is not affected by\nseparate MAKE files etc. as is common in C/C++ settings.\n\nMathematical and scientific applications\n========================================\n\nIn the world of mathematical and scientific computation, the use of Java\nis limited. Most theoretical applications are encumbered by unnecessary\nuser interfaces and the strong need to optimize makes garbage collects\nand especially interpreters very unfavorable. The one place were the\nJava platform is poised for use on large scale mathematical projects is\nin distributed computing problems such as searches for primes etc.\n\nExternal links\n--------------",
  "language": "INFORMAL",
  "phrase": "Java",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/Java"
    }
  ],
  "indexable": true
}