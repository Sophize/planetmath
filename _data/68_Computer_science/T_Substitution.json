{
  "alternatePhrases": [
    "string substitution"
  ],
  "definition": "### Definition {#definition .unnumbered}\n\nLet $\\Sigma_1, \\Sigma_2$ be alphabets. A *substitution*, or *string\nsubstitution*, is a function $s:\\Sigma_1^* \\to P(\\Sigma_2^*)$ such that\n\n-   $s$ preserves the empty word: $s(\\lambda)=\\lbrace \\lambda \\rbrace$,\n    and\n\n-   $s$ preserves concatenation: $s(\\alpha\\beta)=s(\\alpha)s(\\beta)$.\n\nIn other words, for every word $\\alpha$ over $\\Sigma_1$, $s(\\alpha)$ is\na language over $\\Sigma_2$. In the second condition above,\n$s(\\alpha)s(\\beta)$ is the concatenation of languages:\n$\\lbrace uv\\mid u\\in s(\\alpha), v\\in s(\\beta)\\rbrace$.\n\nFor example, suppose $\\Sigma=\\lbrace a,b \\rbrace$. The map $s$ taking\n$u$ to $\\lbrace u' \\rbrace$, where $u'$ is obtained from $u$ by\nreplacing every occurrence of $a$ by $b$ is a substitution.\n\nOne easy way to obtain more examples of substitutions is to start with\nsome function $$f:\\Sigma_1 \\to P(\\Sigma_2^*),$$ and extend it to all of\n$\\Sigma_1^*$ by language concatenation: if $u=a_1\\cdots a_n$, with\n$a_i\\in \\Sigma_1$, defining $$s(u):= f(a_1)\\cdots f(a_n)$$ gives us a\nsubstitution $s$. It is easy to see that the extension is unique (if\n$s_1$ and $s_2$ both extend $f$, then $s_1=s_2$).\n\nIn fact, every substitution is obtained this way: every substitution\n$s:\\Sigma_1^* \\to P(\\Sigma_2^*)$ is the extension of its restriction to\n$\\Sigma_1$. This can be verified directly, but is the result of a more\ngeneral fact: any function $f:A\\to B$, where $B$ is a semigroup, extends\nuniquely to a semigroup homomorphism $f^*:A^* \\to B$ where $A^*$ is the\nsemigroup freely generated by $A$.\n\nIn the previous example, $s$ is the extension of the function that takes\n$a$ to $\\lbrace b\\rbrace$ and $b$ to $\\lbrace b\\rbrace$.\n\n### Closure under Substitution {#closure-under-substitution .unnumbered}\n\nFor any language $L\\subseteq \\Sigma_1^*$ and a substitution\n$s:\\Sigma_1^* \\to P(\\Sigma_2^*)$, define\n$$s(L):=\\bigcup \\lbrace s(u)\\mid u\\in L\\rbrace.$$\n\nA family $\\mathscr{F}$ of languages is said to be *closed under\nsubstitutions* if, given any substitution $s$, with $L \\in \\mathscr{F}$\nand $s(w) \\in \\mathscr{F}$ for each $w\\in L$, we have\n$s(L)\\in \\mathscr{F}$. The following families are closed under\nsubstitutions:\n\n-   regular languages,\n\n-   context-free languages, and\n\n-   type-0 langauges.\n\nAs a corollary, the families of regular, context-free, and type-0\nlanguages are closed under homomorphisms, since every homomorphism of\nlanguages is really just a special case of substitution, such that every\nsymbol of the domain alphabet is mapped to a singleton consisting of a\nword over the range alphabet.\n\nThe family of context-sensitive languages is not closed under general\nsubstitutions. Instead, it is closed under $\\lambda$-free substitutions\n(see remark below).\n\n**Remarks**.\n\n-   The notion of string substitution generally corresponds to our\n    intuitive notion of how a substitution should behave:\n\n    > given words $u,v,w$, then $\\operatorname{Substitute}(u,v,w)$ is a\n    > word that is obtained from $u$ by replacing every occurrence of\n    > $v$ in $u$ by $w$.\n\n    However, this is not always the case. For example, let\n    $\\Sigma=\\lbrace a,b\\rbrace$, and $s$ be the map that takes $u$ to\n    $\\lbrace u'\\rbrace$, where $u'$ is obtained from $u$ by replacing\n    all occurrences of $aa$, if any, by $b$. Then it is easy to see that\n    $s$ is not a substitution, for\n    $$s(a)s(a)=\\lbrace a\\rbrace \\lbrace a\\rbrace = \\lbrace aa\\rbrace$$\n    while $$s(aa)=\\lbrace b\\rbrace \\ne s(a)s(a).$$ Nevertheless, $s$ is\n    \u201cintuitively\u201d a \u201csubstitution\u201d.\n\n-   A substitution $s$ is said to have property $\\mathcal{P}$ if for\n    each $a\\in \\Sigma$, the set $s(a)$ has property $\\mathcal{P}$. Thus,\n    for example, a substitution $s$ is finite if $s(a)$ is a finite set,\n    regular if $s(a)$ is a regular language, and $\\lambda$-free if each\n    $s(a)$ is $\\lambda$-free, etc...\n\n[9]{} S. Ginsburg, [*The Mathematical Theory of Context-Free\nLanguages*]{}, McGraw-Hill, New York (1966). D. C. Kozen, [*Automata and\nComputability*]{}, Springer, New York (1997).",
  "language": "INFORMAL",
  "phrase": "Substitution",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/Substitution"
    }
  ],
  "indexable": true
}