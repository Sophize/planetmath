{
  "alternatePhrases": [
    "BNF",
    "Backus normal form"
  ],
  "definition": "The *Backus-Naur form* (or *BNF* as it is commonly denoted) is a\nconvenient notation used to represent context-free grammars in an\nintuitive and more compact manner. In a Backus-Naur form, there are only\nfour symbols that have special meaning:\n$$\\verb.<.\\qquad \\verb.>.\\qquad \\verb.::=.\\qquad \\verb.|.$$ Given a\ncontext-free grammar $(\\Sigma,N,P,S)$, a non-terminal (a symbol in the\nalphabet $N$) is always enclosed in `<` and `>` (e.g. `<expression>`). A\nterminal (a symbol in the alphabet $\\Sigma$) is often represented as\nitself, though in the context of computer languages a terminal symbol is\noften enclosed in single quotes. A production\n$(\\textit{non-terminal}\\to \\textit{symbols})$ in $P$ is then represented\nas\n\n`<`*non-terminal*`> ::= `*symbols*\n\nThe symbol `|` is used in BNF to combine multiple productions in $P$\ninto one rule. For instance, if $P := \\left\\{S\\to A, S\\to B\\right\\}$,\nthen $P$ in BNF is\n\n`<`*S*`> ::= `*A* `|` *B*\n\n**Examples**.\n\n-   Let $\\Sigma=\\lbrace a,b,c\\rbrace$, $N=\\lbrace S,T,U\\rbrace$ be the\n    terminal and non-terminal alphabets of a formal grammar, and\n    $$P=\\lbrace S\\to aSb, S\\to TU, S\\to c, T\\to cUc, T\\to ac, U\\to bT, U\\to cb\\rbrace$$\n    is the set of productions. Then $(\\Sigma,N,P,S)$ is a context-free\n    grammar. The BNF for $P$ is $$\\begin{aligned}\n    \\verb.<.\\textit{S}\\verb.>.&\\verb.:=.& \\textit{a}\\verb.<.\\textit{S}\\verb.>.\\textit{b}\\verb. | <.\\textit{T}\\verb.><.\\textit{U}\\verb.> | .\\textit{c}\\\\\n    \\verb.<.\\textit{T}\\verb.>.&\\verb.:=.& \\textit{c}\\verb.<.\\textit{U}\\verb.>.\\textit{c} \\verb. | .\\textit{ac}\\\\\n    \\verb.<.\\textit{U}\\verb.>.&\\verb.:=.& \\textit{b}\\verb.<.\\textit{T}\\verb.> | .\\textit{cb}\\end{aligned}$$\n\n-   For another example, let us transform the context-free grammar\n    specified in the to BNF. For readability, we will call $S$\n    *expression*, $A$ *term*, $B$ *factor*, $C$ *number*, and $D$\n    *digit*. The BNF for $P$ is then\n\n    $$\\begin{aligned}\n    \\verb.<.expression\\verb.>. & \\verb.::=. & \\verb.<.term\\verb.>.\\,\n    \\verb.|.\\,\\verb.<.expression\\verb.>.\\,\\verb.+.\\,\\verb.<.term\\verb.>.\\,\n    \\verb.|.\\,\\verb.<.expression\\verb.>.\\,\\verb.-.\\,\\verb.<.term\\verb.>. \\nonumber \\\\\n    \\verb.<.term\\verb.>. & \\verb.::=. & \\verb.<.factor\\verb.>.\\,\n    \\verb.|.\\,\\verb.<.term\\verb.>.\\,\\verb.*.\\,\\verb.<.factor\\verb.>.\\,\n    \\verb.|.\\,\\verb.<.term\\verb.>.\\,\\verb./.\\,\\verb.<.factor\\verb.>. \\nonumber \\\\\n    \\verb.<.factor\\verb.>. & \\verb.::=. & \\verb.<.number\\verb.>.\\,\\verb.|.\\, \\verb.(<.expression\\verb.>). \\nonumber \\\\\n    \\verb.<.number\\verb.>. & \\verb.::=. & \\verb.<.digit\\verb.>.\\,\\verb.|.\\, \\verb.<.number\\verb.>.\\,\\verb.<.digit\\verb.>. \\nonumber \\\\\n    \\verb.<.digit\\verb.>. & \\verb.::=. & \\verb.0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9.\\label{b}\\end{aligned}$$\n\n**Remark**. As the syntaxes of most programming languages are\ncontext-free grammars (or very close to it), the Backus-Naur form can be\nused to specify these syntaxes. In fact, BNF was invented to specify the\nsyntax of ALGOL 60.",
  "language": "INFORMAL",
  "phrase": "Backus-Naur Form",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/BackusNaurForm"
    }
  ],
  "indexable": true
}