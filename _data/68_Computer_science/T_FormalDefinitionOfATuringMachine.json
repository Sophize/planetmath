{
  "alternatePhrases": [],
  "definition": "Based on the informal description of a Turing machine in the parent\nentry, we give it a formal mathematical definition:\n\n**Definition**. A Turing machine $T$ is a 7-tuple consists of the\nfollowing:\n\n1.  an alphabet $S$ called the state alphabet,\n\n2.  an element $s\\in S$ called the start state,\n\n3.  an element $t\\in S$ called the accept state, and\n\n4.  an element $r\\in S$ such that $r\\ne t$, called the reject state,\n\n5.  an alphabet $\\Sigma$ called the input alphabet,\n\n6.  a symbol called the blank symbol $B$ not in $\\Sigma$,\n\n7.  a function\n    $\\delta: S\\times \\Sigma \\to S\\times \\Sigma \\times \\lbrace L,R\\rbrace$\n    called the transition function, such that\n    $$\\delta(t,a)=\\delta(t,b,X)\\qquad\\mbox{and}\\qquad \\delta(r,c)=\\delta(r,d,Y),$$\n    where $a,b,c,d\\in \\Sigma\\cup\\lbrace B\\rbrace$ and\n    $X,Y\\in \\lbrace L,R\\rbrace$.\n\n$t,r$ are collectively called the *halt states* of $T$.\n\nActually, the definition above is only part of the story. What is\ndescribed in the definition is the \u201cfinite control\u201d (the brain) portion\nof a Turing machine. All by itself, the finite control is useless. In\norder for a Turing machine to do computations, two other ingredients are\nneeded to complete the description: a tape, and a reading head. The two\ncan be formalized as follows:\n\n**Definition**. A *tape*, or formally a *tape description*, is a\nfunction $\\tau: \\mathbb{Z}\\to \\Sigma\\cup \\lbrace B\\rbrace$. A *position\nof the reading head* is an integer $n\\in \\mathbb{Z}$.\n\nIn other words, the tape of a Turing machine $T$ is infinitely long in\nboth direction, and is divided up into squares. The content of each\nsquare is either a symbol in $\\Sigma$ or blank ($B$). The purpose of the\ntape is to store input, output, as well as any other strings that are\nused during computations.\n\nThe finite control and the tape of a Turing machine are connected by a\nreading head, which points over the tape, has the ability to move left\nor right along the tape, and reads the tape one square at a time. The\nposition of the reading head is the square it is currently reading.\n\nThe Turing machine defined this way is also known as a two-way\ndeterministic Turing machine.\n\nTo formally describe the computational process of a Turing machine, we\nneed to know three things: what is the current state of the finite\ncontrol, what is on the tape, and what is the current position of the\nreading head:\n\n**Definition**. A *configuration* of a Turing machine is a triple\n$(p,\\tau,m)$, where $p \\in S$, called the state of the configuration,\n$\\tau$ is a tape description called the tape description of the\nconfiguration, and $m$ is a position of the reading head called *the*\nposition of the reading head of the configuration.\n\nWe are now ready to describe what it means for a Turing machine to\ncompute something:\n\n**Definition**. Given a Turing machine $T$ (with the associated tape and\nreading head), a *computation step* $\\rightarrow$ is a binary relation\non the set of all configurations of $T$, defined as follows: if\n$$(p,\\tau,m)\\rightarrow (q,\\tau',n),$$ then $$(q,\\tau',n)= \\left\\{\n\\begin{array}{ll}\n(q,\\tau',m+1) & \\textrm{provided that } \\delta(p,\\tau(m))=(q,b,R), \\\\\n(q,\\tau',m-1) & \\textrm{provided that } \\delta(p,\\tau(m))=(q,b,L),\n\\end{array}\n\\right.$$ where $$\\tau'(i)= \\left\\{\n\\begin{array}{ll}\nb & \\textrm{if } i=m, \\\\\n\\tau(i) & \\textrm{otherwise.}\n\\end{array}\n\\right.$$ We can of course take the reflexive transitive closure of\n$\\rightarrow$ to obtain $\\rightarrow^*$.\n\n**Definition**. An input to a Turing machine is a (finite) word $w$ over\n$\\Sigma$. If the length of $w$ is $n$, we define the tape description\n$\\tau_w$ of $w$ as follows: $$\\tau_w(i)= \\left\\{\n\\begin{array}{ll}\nw_i & \\textrm{the $i$-th letter of } w, \\mbox{ where }0\\le i\\le n, \\mbox{ and}\\\\\nB & \\textrm{otherwise.}\n\\end{array}\n\\right.$$ Note that $\\tau_{\\lambda}$ is the constant function whose\nvalue is $B$, where $\\lambda$ is the empty word.\n\n**Definition**. Given an input $w$ and a Turing machine $T$, a\ncomputation of $w$ by $T$ is a finite sequence\n$$(s,\\tau_w,1)=(p_1,\\tau_1,m_1), (p_2,\\tau_2,m_2), \\ldots, (p_k,\\tau_k, m_k),$$\nwhere $(p_i,\\tau_i,m_i)\\rightarrow (p_{i+1},\\tau_{i+1},m_{i+1})$. From\nthe computation of $w$ above, we also say that the computation of $w$\nleads to state $p_k$. $T$ is said to *accept* an input $w$ iff it there\nis a computation of $w$ leading to the accepting state $t$. In other\nwords, $w$ is accepted by $T$ iff $(s,\\tau_w,1)\\rightarrow^* (t,\\tau,m)$\nfor some $\\tau$ and $m$. Similarly, $w$ is rejected by $T$ iff\n$(s,\\tau_w,1)\\rightarrow^* (r,\\tau,m)$ for some $\\tau$ and $m$. $T$ is\nsaid to *halt* on input $w$ iff it either accepts or rejects $w$.\nOtherwise, $T$ is said to *loop* on $w$.\n\nBy the definition of the transition function $\\delta$, once the\ncomputation of $w$ leads to the accepting state $t$, it never leaves\nthat state. Likewise, once the computation of $w$ leads to the reject\nstate $r$, no further computation will lead to a non-reject state.\n\n**Definition**. Let $T$ be a Turing machine. The set of words accepted\nby $T$ is denoted by $L(T)$. A set $A$ of words over $\\Sigma$ is said to\nbe *Turing acceptable* if there is a Turing machine $T$ such that\n$A=L(T)$. If $T$ halts on every input word, then $T$ is said to be\n*total*.\n\n**Remarks**.\n\n-   It can be shown that $A\\subseteq \\Sigma^*$ is Turing acceptable iff\n    it is recursively enumerable. Furthermore, $A$ is recursive iff\n    there it is Turing acceptable by a total Turing machine.\n\n-   The Turing machines described above are known as language acceptors.\n    However, any Turing machine can be modified so it is capable of\n    producing outputs. Using this modification, one can think of a\n    Turing machine as a partial function where an input is in its domain\n    iff the computation leads to a halting state. More can be found .",
  "language": "INFORMAL",
  "phrase": "Formal Definition Of A Turing Machine",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/FormalDefinitionOfATuringMachine"
    }
  ],
  "indexable": true
}