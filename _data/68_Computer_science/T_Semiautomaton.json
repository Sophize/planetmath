{
  "alternatePhrases": [
    "fsm",
    "finite state machine",
    "state machine"
  ],
  "definition": "A semiautomaton is basically an automaton without designated sets of\nstarting and final states. Formally, a *semiautomaton* $A$ is a triple\n$(S,\\Sigma,\\delta)$ where\n\n-   $S$ is a non-empty set whose elements are called *states*\n\n-   $\\Sigma$ is a non-empty set whose elements are called *input\n    symbols*, and\n\n-   $\\delta$ is a *transition function* that assigns each pair $(s,a)$\n    of state $s$ and input symbol $a$ a subset $\\delta(s,a)$ of states\n    in $S$.\n\nA semiautomaton $A$ is said to be *deterministic* if $\\delta(s,a)$ is a\nsingleton for each $(s,a)\\in S\\times \\Sigma$. In otherwords, $\\delta$ is\na function from $S\\times \\Sigma$ to $S$. Otherwise, it is\n*non-deterministic*. A deterministic semiautomaton is also called a\n*state machine*. A semiautomaton is said to be *finite* if both $S$ and\n$\\Sigma$ are finite. A *finite state machine* (*fsm* for short) is a\nstate machine that is finite.\n\nA finite semiautomaton $A$ can be visualized by what is known as the\n*state diagram* $G_A$ of $A$. Given $A$, the state diagram can be\nconstructed as follows: the vertices of $G_A$ are the states of $A$.\nGiven two vertices $s,t$, an edge from $s$ to $t$ is constructed iff\n$t\\in \\delta(s,a)$ for some $a\\in \\Sigma$. The edge is then labeled $a$.\n\nFor example, let $A$ be defined as follows: $S=\\lbrace r,s,t\\rbrace$,\n$\\Sigma = \\lbrace a, b, c\\rbrace$, and the transition function $\\delta$\nis given by the following table:\n\n              $a$        $b$    $c$\n  ----- --------------- ----- -------\n   $r$        $s$        $r$    $t$\n   $s$   $\\varnothing$   $t$    $r$\n   $t$        $t$        $s$   $r,s$\n\nThen the state diagram $G_A$ is given by\n\n![image](semiautomaton.eps)\n\nWhat we would like to do is to extend the transition function $\\delta$\nso it is applicable to all finite strings over $\\Sigma$. This is done in\ntwo steps:\n\n-   extend $\\delta$ to a function $\\delta': P(S)\\times \\Sigma \\to P(S)$\n    via the subset construction,\n\n-   extend $\\delta'$ to a function\n    $\\delta_1: P(S)\\times \\Sigma^*\\to P(S)$ recursively, given by\n    $$\\delta_1(Q,u):= \\left\\{\n    \\begin{array}{ll}\n    Q & \\textrm{if $u=\\lambda$, the empty word}\\\\\n    \\delta'(Q,u) & \\textrm{if $u\\in \\Sigma$}\\\\\n    \\delta'(\\delta'(Q,v),a) & \\textrm{if $u=v a$ with $v\\in \\Sigma^*,a\\in \\Sigma.$}\n    \\end{array}\n    \\right.$$\n\nWithout causing any confusion, we may identify $\\delta_1$ with $\\delta$.\nBasically, when a string $u=a_1a_2\\cdots a_n$ is fed into a\nsemiautomaton $A$ in state $s$, $\\delta$ takes the first symbol $a_1$\nand computes the next states $\\delta(s,a_1)$. Then it takes the next\nsymbol $a_2$ and computes the next states $\\delta(\\delta(s,a_1),a_2)$,\nand so on. It continues to do this until the last symbol $a_n$ has been\nconsumed, and the next states corresponding to $(s,u)$ is $\\delta(s,u)$.\nFrom the recursive definition above, it is not hard to see that\n$$\\delta(Q,uv)=\\delta(\\delta(Q,u),v)$$ for any $u,v\\in \\Sigma^*,$ as the\nconcatenation operation is associative.\n\nIn the case of a deterministic semiautomaton, $\\delta$ is just a\nfunction $S\\times \\Sigma^*$ to $S$.\n\n**Remark**. Like groups and rings, semiautomata can be considered as\nalgebraic objects, so that concepts such as subsemiautomata and\nhomomorphisms between semiautomata may be defined. However, unlike\ngroups and rings, which are defined based on a single set, semiautomata\nare two-sorted, in that two sets are needed for the definition.\n\n[8]{} A. Ginzburg, [*Algebraic Theory of Automata*]{}, Academic Press\n(1968). M. Ito, *Algebraic Theory of Automata and Languages*, World\nScientific (2004).",
  "language": "INFORMAL",
  "phrase": "Semiautomaton",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/Semiautomaton"
    }
  ],
  "indexable": true
}