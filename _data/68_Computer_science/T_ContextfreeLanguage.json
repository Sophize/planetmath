{
  "alternatePhrases": [
    "type-2 language",
    "type-2 grammar"
  ],
  "definition": "A *context-free language* is a language over some alphabet that can be\ngenerated from a particular kind of a known as a *context-free grammar*.\n\nFormally, a *context-free grammar* is a formal grammar\n$G=(\\Sigma, N, P, \\sigma)$ whose productions in $P$ have the form\n$$X\\to w,$$ where $X\\in N$ and $w\\in \\Sigma^*$. A *context-free\nlanguage* is the formal language $L(G)$ generated by a context-free\ngrammar $G$. In other words,\n$$L(G):=\\lbrace v\\in T^*\\mid \\sigma\\stackrel{*}{\\to} v\\rbrace,$$ where\n$T:=\\Sigma-N$ is the set of terminals, and $\\sigma\\stackrel{*}{\\to}v$\nsimply means that the productions in $P$ are applied a finite number of\ntimes to the starting symbol $\\sigma$ so that $v$ is reached in the end.\n\nThis formal definition is not initially very enlightening. As an\nexample, consider typical infix arithmetic notation. An expression\ntypically consists of one or more terms, joined together by operators\nwith varying precedence. Parentheses can be used to override operator\nprecedence. This syntax is a context-free language. Let us describe such\nexpressions with the operators `+` and `-` with lowest precedence, and\n`*` and `/` with highest precedence, where all operators are\nleft-associative and the only other allowed symbols are integer literals\nand parentheses.\n\n$$\\begin{aligned}\nT & := & \\left\\{\\verb.0., \\verb.1., \\verb.2., \\verb.3., \\verb.4.,\n\\verb.5., \\verb.6., \\verb.7., \\verb.8., \\verb.9., \\verb.(., \\verb.).,\n\\verb.+., \\verb.-., \\verb.*., \\verb./. \\right\\} \\nonumber \\\\\nN & := & \\left\\{ S, A, B, C, D \\right\\} \\nonumber \\\\\nP & := & \\{ (S, A), (S, S\\verb.+.A), (S, S\\verb.-.A), \\nonumber \\\\\n&& (A, B), (A, A\\verb.*.B), (A, A\\verb./.B), \\nonumber \\\\\n&& (B, C), (B, \\verb.(.S\\verb.).), \\nonumber\n(C, D), (C, CD), \\nonumber \\\\\n  &    &\n(D, \\verb.0.),\n(D, \\verb.1.),\n(D, \\verb.2.),\n(D, \\verb.3.),\n(D, \\verb.4.),\n(D, \\verb.5.),\n(D, \\verb.6.),\n(D, \\verb.7.),\n(D, \\verb.8.),\n(D, \\verb.9.)\n\\} \\nonumber \\\\\n\\sigma & := & S \\nonumber\\end{aligned}$$\n\nIt can be shown that the languages of the classical propositional logic\nand predicate logic are both context-free.\n\nContext-free grammars are also known as Type-2 grammars in the Chomsky\nhierarchy. The Chomsky hierarchy specifies Type-2 grammars as consisting\nonly of production rules of the form $A \\to \\gamma$, where $A$ is a\nnon-terminal and $\\gamma$ is a string of terminals and non-terminals.\n\n**Remarks**.\n\n1.  A context-free grammar can be represented by a pushdown automaton.\n    The automaton serves both as an *acceptor* for the language (that\n    is, it can decide whether or not any arbitrary sentence is in the\n    language) and as a *generator* for the language (that is, it can\n    generate any finite sentence in the language in finite time).\n\n2.  The syntaxes of most programming languages are context-free grammars\n    (or very close to it). A very useful subset of context-free\n    languages are regular languages.\n\n3.  A context-free grammar $G$ is context-sensitive if none of its\n    productions has the form $X\\to \\lambda$, where $\\lambda$ is the\n    empty word.\n\n4.  The family of context-free languages has the following closure\n    properties: union, concatenation, Kleene star, homomorphism, inverse\n    homomorphism, reversal, and intersection with a regular language.\n    However, it is not closed under intersection, set difference, and\n    complementation.\n\n[9]{} S. Ginsburg [*The Mathematical Theory of Context-Free\nLanguages*]{}. McGraw-Hill, New York (1966).",
  "language": "INFORMAL",
  "phrase": "Context-Free Language",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/ContextfreeLanguage"
    }
  ],
  "indexable": true
}