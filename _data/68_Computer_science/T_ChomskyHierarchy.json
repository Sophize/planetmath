{
  "alternatePhrases": [
    "Chomsky-Sch\\\"utzenberger hierarchy",
    "Chomsky-Schutzenberger hierarchy",
    "unrestricted grammar"
  ],
  "definition": "The [*Chomsky hierarchy*]{} or [*Chomsky-Sch\u00fctzenberger hierarchy*]{} is\na way of classifying formal grammars into four types, with the lower\nnumbered types being more general.\n\nRecall that a formal grammar $G=(\\Sigma,N,P,\\sigma)$ consists of an\nalphabet $\\Sigma$, an alphabet $N$ of non-terminal symbols properly\nincluded in $\\Sigma$, a non-empty finite set $P$ of productions, and a\nsymbol $\\sigma\\in N$ called the start symbol. The non-empty alphabet\n$T:=\\Sigma-N$ is the set of terminal symbols. Then $G$ is called a\n\nType-0 grammar\n\n:   if there are no restrictions on the productions. Type-0 grammar is\n    also known as an *unrestricted grammar*, or a *phrase-structure\n    grammar*.\n\nType-1 grammar\n\n:   if the productions are of the form $uAv \\to uWv$, where\n    $u,v,W\\in \\Sigma^*$ with $W\\ne \\lambda$, and $A\\in N$, or\n    $\\sigma\\to \\lambda$, provided that $\\sigma$ does not occur on the\n    right hand side of any productions in $P$. As $A$ is surrounded by\n    words $u,v$, a type-1 grammar is also known as a context-sensitive\n    grammar.\n\nType-2 grammar\n\n:   if the productions are of the form $A\\to W$, where $A\\in N$ and\n    $W\\in \\Sigma^*$. Type-2 grammars are also called context-free\n    grammars, because the left hand side of any productions are \u201cfree\u201d\n    of contexts.\n\nType-3 grammar\n\n:   if the productions are of the form $A\\to u$ or $A\\to uB$, where\n    $A,B\\in N$ and $u\\in T^*$. Owing to the fact that languages\n    generated by type-3 grammars can be represented by regular\n    expressions, type-3 grammars are also known as regular grammars.\n\nIt is clear that every type-$i$ grammar is type-0, and every type-3\ngrammar is type-2. A type-2 grammar is not necessarily type-1, because\nit may contain both $\\sigma\\to \\lambda$ and $A\\to W$, where $\\lambda$\noccurs in $W$. Nevertheless, the relevance of the hierarchy has more to\ndo with the languages generated by the grammars. Call a formal language\na type-$i$ language if it is generated by a type-$i$ grammar, and denote\n$\\mathscr{L}_i$ the family of type-$i$ languages. Then it can be shown\nthat\n$$\\mathscr{L}_3 \\subset \\mathscr{L}_2 \\subset \\mathscr{L}_1 \\subset \\mathscr{L}_0$$\nwhere each inclusion is strict.\n\nBelow is a table summarizing the four types of grammars, the languages\nthey generate, and the equivalent computational devices accepting the\nlanguages.\n\n   grammar      language family                 abbreviation                    automaton\n  --------- ------------------------ ---------------------------------- --------------------------\n   type-0    recursively enumerable   $\\mathscr{L}_0$ or $\\mathscr{E}$        turing machine\n   type-1      context-sensitive      $\\mathscr{L}_1$ or $\\mathscr{S}$   linear bounded automaton\n   type-2         context-free        $\\mathscr{L}_2$ or $\\mathscr{F}$      pushdown automaton\n   type-3           regular           $\\mathscr{L}_3$ or $\\mathscr{R}$       finite automaton",
  "language": "INFORMAL",
  "phrase": "Chomsky Hierarchy",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/ChomskyHierarchy"
    }
  ],
  "indexable": true
}