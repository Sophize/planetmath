{
  "alternatePhrases": [],
  "definition": "Hough Transform {#hough-transform .unnumbered}\n===============\n\nThe *Hough transform* is a general technique for identifying the\nlocations and orientations of certain types of features in a digital\nimage. Developed by Paul Hough in 1962 and patented by IBM, the\ntransform consists of parameterizing a description of a feature at any\ngiven location in the original image\u2019s space. A mesh in the space\ndefined by these parameters is then generated, and at each mesh point a\nvalue is accumulated, indicating how well an object generated by the\nparameters defined at that point fits the given image. Mesh points that\naccumulate relatively larger values then describe features that may be\nprojected back onto the image, fitting to some degree the features\nactually present in the image.\n\nHough Line Transform {#hough-line-transform .unnumbered}\n====================\n\nThe simplest form of the Hough transform is the Hough line transform.\nSuppose we are attempting to describe lines that match edges in a\ntwo-dimensional image. If we perform an edge-detection technique on the\nimage, we might obtain an image like the following.\n\n![image](ex1.eps)\n\nTo use the Hough transform, we need a way to characterize a line. One\nrepresentation of a line is the slope-intercept form\n\n$$y = mx + b, \\label{eq:sif}$$\n\nwhere $m$ is the slope of the line and $b$ is the $y$-intercept (that\nis, the $y$ component of the coordinate where the line intersects the\n$y$-axis). Given this characterization of a line, we can then iterate\nthrough any number of lines that pass through any given point $(x, y)$.\nBy iterating through fixed values of $m$, we can solve for $b$ by\n\n$$b = y - mx$$\n\nHowever, this method is not very stable. As lines get more and more\nvertical, the magnitudes of $m$ and $b$ grow towards infinity. A more\nuseful representation of a line is its *normal form*.\n\n$$x\\cos\\theta + y\\sin\\theta = \\rho \\label{eq:nf}$$\n\nThis equation specifies a line passing through $(x, y)$ that is\nperpendicular to the line drawn from the origin to $(\\rho, \\theta)$ in\npolar space (i.e., $(\\rho\\cos\\theta,\\rho\\sin\\theta)$ in rectangular\nspace). For each point $(x, y)$ on a line, $\\theta$ and $\\rho$ are\nconstant.\n\nNow, for any given point $(x, y)$, we can obtain lines passing through\nthat point by solving for $\\rho$ and $\\theta$. By iterating through\npossible angles for $\\theta$, we can solve for $\\rho$ by directly. This\nmethod proves to be more than , as it is numerically stable for lines of\nany angle.\n\nThe Accumulator {#the-accumulator .unnumbered}\n===============\n\nTo generate the Hough transform for lines in our image, we choose a\nparticular granularity for our lines (e.g., $10^\\circ$), and then\niterate through the angles defined by that granularity. For each angle\n$\\theta$, we then solve for $\\rho = x\\cos\\theta + y\\sin\\theta$, and then\nincrement the value located at $(\\rho,\\theta)$. This process can be\nthought of as a \u201cvote\u201d by the point $(x,y)$ for the line defined by\n$(\\rho,\\theta)$, and variations on how votes are generated exist for\nmaking the transform more robust.\n\nThe result is a new image defined on a polar mesh, such as the one below\n(generated from the previous image).\n\n![image](ex2.eps)\n\nNote that in this representation we have projected the polar space onto\na rectangular space. The origin is in the upper-left corner, the\n$\\theta$ axis extends to the right, and the $\\rho$ axis extends\ndownward. The image has been normalized, so that each pixel\u2019s intensity\nrepresents the ratio of the original value at that location to the\nbrightest original value.\n\nThe intensity of a pixel corresponds to the number of votes it received\nrelative to the pixel that received the most votes.\n\nIterating through each value of $\\theta$ for a particular $(x, y)$ in\nthe original image generates a curve in the rectangular representation\nof the Hough transform. Lines that intersect in the same location are\ngenerated by collinear points. Thus, if we locate the brightest points\nin the image, we will obtain parameters describing lines that pass\nthrough many points in our original image. Many methods exist for doing\nthis; we may simply threshold the Hough transform image, or we can\nlocate the local maxima. We then get a set of infinite lines, as below.\nThis notion corresponds neatly with the notion of a voting process; the\nbrighter pixels represented coordinates in $(\\rho,\\theta)$ space that\ngot the most votes, and thus are more likely to generate lines that fit\nmany points.\n\nFor each $(\\rho,\\theta)$ that we deem bright enough in the Hough\ntransform, we can then generate a line from the parameterization given\nearlier. Here is the projection of some lines obtained from the previous\nimage\u2019s Hough transform, drawn on top of the original image.\n\n![image](corr.eps)\n\nWe can also use this information to break these lines up into line\nsegments that fit our original binary image well. Below is an example of\nthe line segments we might obtain, drawn on top of the original image.\n\n![image](ex5.eps)\n\nHough Circle Transform {#hough-circle-transform .unnumbered}\n======================\n\nThe Hough transform can be used for representing objects besides lines.\nFor instance, a circle can be parameterized as\n\n$$(x-a)^2+(y-b)^2=r^2$$\n\nHere, $(a, b)$ is the coordinate of the center of the circle that passes\nthrough $(x, y)$, and $r$ is its radius. Since there are three\nparameters for this equation, it follows that the Hough transform will\nbe a three-dimensional image. Therefore circles require more computation\nto find than lines. For this reason the Hough transform is more\ntypically used for simpler curves, such as straight lines and parabolas.\n\nGeneral Hough Transform {#general-hough-transform .unnumbered}\n=======================\n\nThe *general Hough transform* is used when an analytical description of\nthe feature we are searching for is not possible. Instead of a\nparametric equation describing the feature, we use some sort of lookup\ntable, correlating locations and orientations of features in the\noriginal image to some set of parameters in the Hough transform space.\n\n[9]{} Gonzalez, R.C. and Woods, R.E., *Digital Image Processing*,\nPrentice Hall, 1993.",
  "language": "INFORMAL",
  "phrase": "Hough Transform",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/HoughTransform"
    }
  ],
  "indexable": true
}