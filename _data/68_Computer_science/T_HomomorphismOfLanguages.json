{
  "alternatePhrases": [
    "$\\epsilon$-free",
    "non-erasing"
  ],
  "definition": "Let $\\Sigma_1$ and $\\Sigma_2$ be two alphabets. A function\n$h: \\Sigma_1^* \\to \\Sigma_2^*$ is called a *homomorphism* if it is a\nsemigroup homomorphism from semigroups $\\Sigma_1^*$ to $\\Sigma_2^*$.\nThis means that\n\n-   $h$ preserves the empty word: $h(\\lambda)=\\lambda$, and\n\n-   $h$ preserves concatenation: $h(\\alpha\\beta)=h(\\alpha)h(\\beta)$ for\n    any words $\\alpha,\\beta\\in \\Sigma_1^*$.\n\nSince the alphabet $\\Sigma_1$ freely generates $\\Sigma_1^*$, $h$ is\nuniquely determined by its restriction to $\\Sigma_1$. Conversely, any\nfunction from $\\Sigma_1$ extends to a unique homomorphism from\n$\\Sigma_1^*$ to $\\Sigma_2^*$. In other words, it is enough to know what\n$h(a)$ is for each symbol $a$ in $\\Sigma_1$. Since every word $w$ over\n$\\Sigma$ is just a concatenation of symbols in $\\Sigma$, $h(w)$ can be\ncomputed using the second condition above. The first condition takes\ncare of the case when $w$ is the empty word.\n\nSuppose $h:\\Sigma_1^* \\to \\Sigma_2^*$ is a homomorphism,\n$L_1\\subseteq \\Sigma_1^*$ and $L_2\\subseteq \\Sigma_2^*$. Define\n$$h(L_1):=\\lbrace h(w)\\mid w\\in L\\rbrace \\qquad\\mbox{and}\\qquad h^{-1}(L_2):=\\lbrace v\\mid h(v)\\in L_2\\rbrace.$$\nIf $L_1,L_2$ belong to a certain family of languages, one is often\ninterested to know if $h(L_1)$ or $h^{-1}(L_2)$ belongs to that same\nfamily. We have the following result:\n\n1.  If $L_1$ and $L_2$ are regular, so are $h(L_1)$ and $h^{-1}(L_2)$.\n\n2.  If $L_1$ and $L_2$ are context-free, so are $h(L_1)$ and\n    $h^{-1}(L_2)$.\n\n3.  If $L_1$ and $L_2$ are type-0, so are $h(L_1)$ and $h^{-1}(L_2)$.\n\nHowever, the family $\\mathscr{F}$ of context-sensitive languages is not\nclosed under homomorphisms, nor inverse homomorphisms. Nevertheless, it\ncan be shown that $\\mathscr{F}$ is closed under a restricted class of\nhomomorphisms, namely, $\\lambda$-free homomorphisms. A homomorphism is\nsaid to be *$\\lambda$-free* or *non-erasing* if $h(a)\\ne \\lambda$ for\nany $a\\in \\Sigma_1$.\n\n**Remarks**.\n\n-   Every homomorphism induces a substitution in a trivial way: if\n    $h:\\Sigma_1^* \\to \\Sigma_2^*$ is a homomorphism, then\n    $h_s:\\Sigma_1\\to P(\\Sigma_2^*)$ defined by\n    $h_s(a)=\\lbrace h(a) \\rbrace$ is a substitution.\n\n-   One can likewise introduce the notion of antihomomorphism of\n    languages. A map $g:\\Sigma_1^* \\to \\Sigma_2^*$ is an\n    antihomomorphism if $g(\\alpha\\beta)=g(\\beta)g(\\alpha)$, for any\n    words $\\alpha,\\beta$ over $\\Sigma_1$. It is easy to see that $g$ is\n    an antihomomorphism iff $g\\circ \\operatorname{rev}$ is a\n    homomorphism, where $\\operatorname{rev}$ is the reversal operator.\n    Closure under antihomomorphisms for a family of languages follows\n    the closure under homomorphisms, provided that the family is closed\n    under reversal.\n\n[9]{} S. Ginsburg, [*The Mathematical Theory of Context-Free\nLanguages*]{}, McGraw-Hill, New York (1966). H.R. Lewis, C.H.\nPapadimitriou [*Elements of the Theory of Computation*]{}.\nPrentice-Hall, Englewood Cliffs, New Jersey (1981).",
  "language": "INFORMAL",
  "phrase": "Homomorphism Of Languages",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/HomomorphismOfLanguages"
    }
  ],
  "indexable": true
}