{
  "alternatePhrases": [],
  "definition": "Given a word $u$ and a context-free grammar $G$, how do we determine if\n$u\\in L(G)$?\n\nThere are in general two ways to proceed. Start from $u$, and proceed\nbackward to find $v$ such that $v\\Rightarrow u$. Keep going until a\nderivation $\\sigma\\Rightarrow^* u$ is found. This procedure is known as\nthe bottom-up parsing of $u$. The other method the top-down approach:\nbegin with the starting symbol $\\sigma$, and work its way down to $u$,\nso $\\sigma\\Rightarrow^* u$.\n\nAs with the bottom-up approach, finding a derivation of $u$ from the\ntop-down may be time consuming, if one is lucky enough to find a\nderivation at all.\n\nThere is a class of grammars, known as the $LL(k)$ grammars, which make\nthe top-down parsing of a word natural and direct. The first $L$ in\n$LL(k)$ means scanning the symbols of $u$ from left to right, the second\n$L$ stands for finding a leftmost derivation ($\\Rightarrow_L$) for $u$,\nand $k$ means having the allowance to look at up to $k$ symbols ahead\nwhile scanning.\n\n**Definition**. Let $G=(\\Sigma,N,P,\\sigma)$ be a context-free grammar\nsuch that $\\sigma\\to \\sigma$ is not a production of $G$, and $k\\ge 0$ an\ninteger. Suppose $u\\in L(G)$ with a $X\\to U_1$ a production in a\nleftmost derivation of $u$:\n$$\\sigma \\Rightarrow_L^* UXU_2 \\Rightarrow_L UU_1U_2 \\Rightarrow_L^* u.$$\nLet $n=|U|+k$ and $v$ be the prefix of $u$ of length $n$ (if $|u|<n$,\nthen set $v=u$).\n\nThen $G$ is said to be $LL(k)$ if for any $w\\in L(G)$, with $v$ as a\nprefix, such that there is a production $X\\to W_1$ in a leftmost\nderivation of $w$:\n$$\\sigma \\Rightarrow_L^* UXW_2 \\Rightarrow_L UW_1W_2 \\Rightarrow_L^* w,$$\nimplies that $W_1=U_1$.\n\nIn a leftmost derivation $D_u$ of a word $u$, call a prefix $v$ of $u$\nis a *leftmost descendant* of a production $P\\to U$ if\n$\\sigma \\Rightarrow^* vPU' \\Rightarrow vUU' \\Rightarrow^* u$ is $D_u$.\nThen the definition above can be restated in words as follows:\n\nGiven a leftmost derivation $D_u$ of a word $u$, a production used in\n$D_u$ is uniquely determined up to $k$ symbols beyond the prefix of $u$\nwhich is a leftmost descendant of the production. In other words, if\n$D_u$ and $D_w$ are leftmost derivations of $u$ and $w$ which agree on\n$k$ symbols beyond the common prefix $v$, where $v$ is both a leftmost\ndescendant of $X\\to U$ used in $D_u$, and a leftmost descendant of\n$X\\to W$ used in $D_w$, then $X\\to U$ and $X\\to W$ are the same\nproduction, i.e. $U=W$.\n\nEvery $LL(k)$ is unambiguous. Furthermore, every $LL(k)$ grammar is .\n\nGiven a context-free grammar $G$ and $k\\ge 0$, there is an algorithm\ndeciding whether $G$ is $LL(k)$.\n\n**Examples**\n\n-   The grammar $G$ over $\\Sigma=\\lbrace a,b\\rbrace$, with productions\n    $\\sigma \\to a^2 \\sigma b^2$, $\\sigma \\to a$ and $\\sigma \\to \\lambda$\n    is $LL(2)$ but not $LL(1)$. It is not hard to see that $L(G)$ is the\n    set\n    $\\lbrace a^m b^n \\mid n\\mbox{ is even, and }n\\le m\\le n+1\\rbrace$.\n    On the other hand, the grammar $G'$ over $\\Sigma$, with productions\n    $$\\sigma \\to aX, \\quad \\sigma\\to \\lambda,\\quad X\\to aYb,\\quad X\\to \\lambda,\\quad Y\\to aXb, \\quad Y\\to b$$\n    also generates $L(G)$, but is $LL(1)$ instead.\n\n-   The grammar $G$ over $\\lbrace a,b,c\\rbrace$, with productions\n    $$\\sigma\\to X,\\quad \\sigma\\to Y,\\quad X\\to aXb,\\quad X\\to ab, \\quad Y\\to aYc, \\quad Y\\to ac$$\n    is not $LL(k)$ for any $k\\ge 0$.\n\n**Definition** A language is said to be $LL(k)$ if it is generated by an\n$LL(k)$ grammar. The family of $LL(k)$ languages is denoted by\n$\\mathscr{LL}(k)$.\n\nIt is easy to see that an $LL(0)$ contains no more than one word.\nFurthermore, it can be shown that\n$$\\mathscr{LL}(0)\\subset \\mathscr{LL}(1)\\subset \\cdots \\subset \\mathscr{LL}(k) \\subset \\cdots ,$$\nand the inclusion is strict. If $\\mathscr{LL}(k)'$ denotes the family of\n$\\lambda$-free $LL(k)$ languages, then\n$$\\mathscr{LL}(0)'= \\mathscr{LL}(1)'= \\cdots = \\mathscr{LL}(k)' = \\cdots .$$\n\nGiven two $LL(k)$ grammars $G_1$ and $G_2$, there is an algorithm that\ndecides if $L(G_1)=L(G_2)$.\n\n[9]{} A. Salomaa, [*Formal Languages*]{}, Academic Press, New York\n(1973).",
  "language": "INFORMAL",
  "phrase": "Ll(K)",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LLk"
    }
  ],
  "indexable": true
}