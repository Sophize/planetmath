{
  "alternatePhrases": [],
  "definition": "A [*red-black tree*]{} is a type of self-balancing binary search tree, a\ndata structure used in computer science, typically used to implement\nassociative arrays. The original structure was invented in 1972 by\nRudolf Bayer who called them \u201csymmetric binary B-trees\u201d, but acquired\nits modern name in a paper in 1978 by Leo J. Guibas and Robert\nSedgewick. It is complex, but has good worst-case running time for its\noperations and is efficient in practice: it can search, insert, and\ndelete in $O(\\log n)$ time, where $n$ is the number of elements in the\ntree.\n\nA red-black tree is a special type of binary tree, which is a structure\nused in computer science to organize pieces of comparable data, such as\nnumbers. In binary trees, each piece of data is stored in a node. One of\nthe nodes always functions as our starting place, and is not the child\nof any node; we call this the root node or root. It has up to two\n\u201cchildren\u201d, other nodes to which it connects. Each of these children can\nhave up to two children of its own, and so on. The root node thus has a\npath connecting it to any other node in the tree.\n\nIf a node has no children, we call it a leaf node, since intuitively it\nis at the periphery of the tree. A subtree is the portion of the tree\nthat can be reached from a certain node, considered as a tree itself. In\nred-black trees, the leaves are assumed to be null; that is, they do not\ncontain any data.\n\nBinary search trees, including red-black trees, satisfy the constraint\nthat every node contains a value less than or equal to all nodes in its\nright subtree, and greater than or equal to all nodes in its left\nsubtree. This makes it quick to search the tree for a given value, and\nallows efficient in-order traversal of elements.\n\nRed-black trees, along with AVL trees, offer the best possible\nworst-case guarantees for insertion time, deletion time, and search\ntime. Not only does this make them valuable in time-sensitive\napplications such as real-time applications, but it makes them valuable\nbuilding blocks in other data structures which provide worst-case\nguarantees; for example, many data structures used in computational\ngeometry can be based on red-black trees.\n\nRed-black trees are also particularly valuable in functional\nprogramming, where they are one of the most common persistent data\nstructures, used to construct associative arrays and sets which can\nretain previous versions after mutations. The persistent version of\nred-black trees requires O(log n) space for each insertion or deletion,\nin addition to time.\n\nRed-black trees are an isometry of 2-3-4 trees. In other words, for\nevery 2-3-4 tree, there exists at least one red-black tree with data\nelements in the same order. The insertion and deletion operations on\n2-3-4 trees are also equivalent to color-flipping and rotations in\nred-black trees. This makes 2-3-4 trees an important tool for\nunderstanding the logic behind red-black trees, and this is why many\nintroductory algorithm texts introduce 2-3-4 trees just before red-black\ntrees, even though 2-3-4 trees are not often used in practice.\n\nA red-black tree is a binary search tree where each node has a color\nattribute, the value of which is either red or black. In addition to the\nordinary requirements imposed on binary search trees, we make the\nfollowing additional requirements of any valid red-black tree:\n\nA node is either red or black. The root is black. All leaves are black.\n(This includes the NIL children.) Both children of every red node are\nblack. (So every red node must have a black parent by modus tollens.)\nEvery simple path from a node to a descendant leaf contains the same\nnumber of black nodes. These constraints enforce a critical property of\nred-black trees: that the longest possible path from the root to a leaf\nis no more than twice as long as the shortest possible path. The result\nis that the tree is roughly balanced. Since operations such as\ninserting, deleting, and finding values requires worst-case time\nproportional to the height of the tree, this theoretical upper bound on\nthe height allows red-black trees to be efficient in the worst-case,\nunlike ordinary binary search trees.\n\nTo see why these properties guarantee this, it suffices to note that no\npath can have two red nodes in a row, since both children of every red\nnode are black and a black node is the only possible parent for a red\nnode. The shortest possible path has all black nodes, and the longest\npossible path alternates between red and black nodes. Since all maximal\npaths have the same number of black nodes, because every simple path\nfrom a node to a descendant leaf contains the same number of black\nnodes, this shows that no path is more than twice as long as any other\npath.\n\nIn many presentations of tree data structures, it is possible for a node\nto have only one child, and leaf nodes contain data. It is possible to\npresent red-black trees in this paradigm, but it changes several of the\nproperties and complicates the algorithms. For this reason, in this\narticle we use \u201cnil leaves\u201d or \u201cnull leaves\u201d, which contain no data and\nmerely serve to indicate where the tree ends, as shown above. These\nnodes are often omitted in drawings, resulting in a tree which seems to\ncontradict the above principles, but which in fact does not. A\nconsequence of this is that all internal (non-leaf) nodes have two\nchildren, although one or more of those children may be a null leaf.\n\nSome explain a red-black tree as a binary search tree whose edges,\ninstead of nodes, are colored in red or black, but this does not make\nany difference. The color of a node in our terminology corresponds to\nthe color of the edge connecting the node to its parent, except that the\nroot node is always black in our terminology (property 2) whereas the\ncorresponding edge does not exist.\n\n[*This entry was adapted from the Wikipedia article as of December 19,\n2006.*]{}",
  "language": "INFORMAL",
  "phrase": "Red-Black Tree",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/RedblackTree"
    }
  ],
  "indexable": true
}