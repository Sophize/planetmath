{
  "alternatePhrases": [],
  "definition": "A *lattice polynomial*, informally, is an expression involving a finite\nnumber of variables $x,y,z,\\ldots$, two symbols $\\vee,\\wedge$, and\nsometimes the parentheses $(,)$ in a *meaningful manner*. Loosely\nspeaking, whenever $p$ and $q$ are lattice polynomials, the only lattice\npolynomials that can be formed from $p,q,\\vee,\\wedge$ are $p\\vee q$ and\n$p\\wedge q$. We will explain formally what *meaningful manner* is a\nlittle later. Some examples of lattice polynomials are\n$x\\vee (x\\vee x)$, $(y\\wedge x)\\vee x$, and\n$(x\\vee y)\\wedge (y\\vee z)\\wedge (z\\vee x)$, while $\\vee\\wedge x$,\n$xy\\wedge yz$, $z\\vee)($ are not lattice polynomials.\n\nTo formally define what a lattice polynomial is, we resort to model\ntheory. To begin with, we have a countable set of variables\n$V=\\lbrace x, y, z,\\ldots \\rbrace$, a set of binary function symbols\n$F=\\lbrace \\vee, \\wedge\\rbrace$. We define pairwise disjoint sets\n$S_0,S_1,\\ldots,S_n,\\ldots$ recursively, as follows:\n\n-   $S_0=V$,\n\n-   $S_{k+1}=\\lbrace (p\\vee q), (p\\wedge q)\\mid p,q\\in S_k\\rbrace\\cup S_k$.\n\nThen we set $S=\\bigcup_{i=0}^{\\infty} S_i$. An element of $S$ is called\na *lattice polynomial*.\n\nNote that in the above definition, $((x\\vee y)\\vee z)$ is a lattice\npolynomial while $(x\\vee y\\vee z)$ is not, for any variables\n$x,y,z\\in V$. To reduce the number of parentheses in a lattice\npolynomial, we typically identify $(p\\vee q)$ with $p\\vee q$ and\n$(p\\wedge q)$ with $p\\wedge q$. In addition, since the meet and join\noperations are associative in any lattice, it is a common practice to\nfurther reduce the number of parentheses in a lattice polynomial by\nidentifying both $(p\\vee (q\\vee r))$ and $((p \\vee q)\\vee r)$ with\n$p\\vee q\\vee r$, and $(p\\wedge (q\\wedge r))$ and\n$((p \\wedge q)\\wedge r)$ with $p\\wedge q\\wedge r$.\n\nAnother thing that can be said about the above construction of is that\nany given lattice polynomial can be constructed from $S_0$ in a finite\nnumber of steps. If $p\\in S_n-S_{n-1}$, $n\\ge 1$, then $p$ can be\nconstructed in exactly $n$ steps. The minimum number of variables (in\n$S_0$) that is required to construct $p$ is called the *arity* of $p$.\nFor example, if $p=((x\\vee y)\\wedge x)$ then the arity of $p$ is $2$. If\nan $n$-ary lattice polynomial $p$ can be constructed from\n$x_1,\\ldots,x_n$, we often write $p=p(x_1,\\ldots,x_n)$.\n\nOne more important number associated with a lattice polynomial $p$ is\nits *weight*, defined recursively as $w(p)=1$ if $p\\in S_0$, and\n$w(p\\vee q)=w(p\\wedge q)=w(p)+w(q)$.\n\nGiven any $n$-ary lattice polynomial $p$ and any lattice $L$, we can\nassociate $p$ with an $m$-ary *lattice polynomial function* $f:L^m\\to L$\ndefined by\n$$f(a_1,\\ldots,a_m):=p(a_1,\\ldots,a_n),\\mbox{ where }m\\ge n\\mbox{ and }a_i \\in L.$$\nThe expression $p(a_1,\\ldots,a_n)$ is the *evaluation* of $p$ at\n$(a_1,\\ldots,a_n)$. That is, we substitute each $x_i$ for $a_i$, and we\ninterpret $\\vee$ and $\\wedge$ in $p$ as the join and meet operations in\n$L$.\n\nTwo lattice polynomials $p,q$ of arities $m,n$, where $m\\ge n$, are said\nto be *equivalent* if their corresponding $m$-ary lattice polynomial\nfunctions evaluate to the same values in any lattice. For example,\n$x\\vee y$ and $y\\vee x$ are equivalent. Similarly, $x$, $x\\vee x$,\n$x\\wedge x$, and $x\\vee (y\\wedge x)$ are equivalent lattice polynomials.\n\n**Remark**. Similarly, one can define a *Boolean polynomial* by\nenlarging the set $F$ of function symbols to include the unary operator\n$^{\\prime}$, and\n$S_{k+1}=\\lbrace (p\\vee q), (p\\wedge q), (p^{\\prime}) \\mid p,q\\in S_k\\rbrace\\cup S_k$.\nThen a Boolean polynomial is just an element of\n$S=\\cup_{i=0}^{\\infty} S_i$. The weight of a Boolean polynomial is\nsimilarly defined, with the additional $w(p^{\\prime})=w(p)$.",
  "language": "INFORMAL",
  "phrase": "Lattice Polynomial",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LatticePolynomial"
    }
  ],
  "indexable": true
}