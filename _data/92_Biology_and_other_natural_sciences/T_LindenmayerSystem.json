{
  "alternatePhrases": [
    "L system",
    "DL-system",
    "PL-system"
  ],
  "definition": "### Definition {#definition .unnumbered}\n\nLindenmayer systems, or L-systems for short, are a variant of general\nrewriting systems. Like a rewriting system, an L-system is also a\nlanguage generator, where words are generated by applications of finite\nnumbers of rewriting steps to some initial word given in advance.\nHowever, unlike a rewriting system, rewriting occurs in *parallel* in an\nL-system. The notion of L-system was introduced by plant biologist\nAristid Lindenmayer when he was studying the growth development of red\nalgae.\n\nFormally, an *L-system* is a triple $G=(\\Sigma,P,w)$, where\n\n1.  $\\Sigma$ is an alphabet,\n\n2.  $w$ is a word over $\\Sigma$, and\n\n3.  $P$ is a finite subset of $\\Sigma\\times \\Sigma^*$ such that for\n    every $a\\in \\Sigma$, there is at least one $u\\in \\Sigma^*$ such that\n    $(a,u)\\in P$.\n\n$w$ is called the *start word*, or the *axiom* of $G$, and elements of\n$P$ are called productions of the L-system $G$, and are written $a\\to u$\ninstead of $(a,u)$.\n\nAs stated above, an L-system is a language generator, where words are\ngenerated from the axiom $w$ by repeated applications of productions of\n$P$. Let us see how this is done. Define a binary relation $\\Rightarrow$\non $\\Sigma^*$ as follows: for words $u,v\\in \\Sigma^*$,\n\n> $u\\Rightarrow v$ iff either $u=a_1\\cdots a_n$ and $v=v_1\\cdots v_n$,\n> where $a_i\\to v_i\\in P$, or $u=v$.\n\nNow, take the transitive closure $\\Rightarrow^*$ of $\\Rightarrow$ and\nset $$L(G):=\\lbrace u\\mid w\\Rightarrow^* u\\rbrace.$$ Then $L(G)$ is\ncalled the *language generated* by the L-system $G$. An L-language is\n$L(G)$ for some L-system $G$.\n\n### Examples {#examples .unnumbered}\n\n1.  Let $G=(\\lbrace a\\rbrace, \\lbrace a\\to a^2\\rbrace, a)$. In two\n    derivations, we get $a\\Rightarrow a^2 \\Rightarrow a^2a^2 = a^4$. It\n    is easy to see that after $n$ derivations, we get\n    $a\\Rightarrow^* a^{2^n}$, and that\n    $L(G)=\\lbrace a^{2^n} \\mid n\\ge 1\\rbrace$. Note that if parallel\n    rewriting is not required then $a^3$ may be derived in three steps:\n    $a\\Rightarrow a^2 \\Rightarrow (a^2)a=a^3$.\n\n2.  Let $G=(\\lbrace a\\rbrace, \\lbrace a\\to a, a\\to a^2\\rbrace, a)$. Then\n    $L(G)=\\lbrace a\\rbrace^+$.\n\n3.  Let\n    $G=(\\lbrace a\\rbrace, \\lbrace a\\to \\lambda, a\\to a^2\\rbrace, a)$.\n    Then $L(G)=\\lbrace a^{2n}\\mid n\\ge 0\\rbrace \\cup \\lbrace a\\rbrace$.\n\n4.  Let $G=(\\lbrace a,b\\rbrace, \\lbrace a\\to ab, b\\to ba\\rbrace, a)$.\n    Then we get a sequence of words\n    $a\\Rightarrow ab \\Rightarrow abba \\Rightarrow abbabaab \\Rightarrow \\cdots $,\n    and $L(G)$ is the set containing words in the sequence. Note the\n    recursive nature of the sequence: if $u_n$ is the $n$th word in the\n    sequence, then $u_1 = a$ and $u_{n+1}=u_n h(u_n)$, where $h$ is the\n    homomorphism given by $h(a)=b$ and $h(b)=a$.\n\n5.  L-systems can be used to generate graphs. Usually, symbols in\n    $\\Sigma$ represent instructions on how to construct the graph. For\n    example,\n    $$G=(\\lbrace a,b,c\\rbrace, \\lbrace a\\to a, b\\to b, c\\to cacbbcac \\rbrace, c)$$\n    generates the famous Koch curve. If $u \\in L(G)$ is derived from $c$\n    in $n$ steps, then $u$ represents the $n$-th iteration of the Koch\n    curve. To draw the $n$-th iteration based on $u$, we do the\n    following:\n\n    1.  write $u=d_1\\cdots d_m$, where $d_i\\in \\Sigma$ (it is easy to\n        see that $m=2^{n-1}$).\n\n    2.  at each $d_i$, a current position $z_i$, and current direction\n        $\\theta_i$, are given.\n\n    3.  start at the origin on the Euclidean plane in the positive $x$\n        direction, so that $z_0=(0,0)$ and $\\theta_0=0$.\n\n    4.  upon reading $d_i$, where $i>0$:\n\n        -   if $d_i=a$, set $z_i = z_{i-1}$ and\n            $\\theta_i = \\theta_{i-1}+60$,\n\n        -   if $d_i=b$, set $z_i = z_{i-1}$ and\n            $\\theta_i = \\theta_{i-1}-60$,\n\n        -   if $d_i=c$, draw a line segment of unit length from\n            $z_{i-1}$ to a point $P$ based on $\\theta_{i-1}$, and set\n            $z_i=P$ and $\\theta_i=\\theta_{i-1}$.\n\nA production $b\\to u$ is said to correspond to $a\\in \\Sigma$ if $b=a$.\nBoth productions in Example 2 correspond to $a$. A production is said to\nbe a constant production if it has the form $a\\to a$. A symbol in\n$\\Sigma$ is called a *constant* if the only corresponding production is\nthe constant production. In the last example above, $a,b$ are both\nconstants. $a$ is not a constant in Example 2, even though it has a\ncorresponding constant production.\n\n### Properties {#properties .unnumbered}\n\nGiven an L-system $G=(\\Sigma,P,w)$, we can associate a function\n$f_G:\\Sigma\\to 2^{\\Sigma^*}$ as follows: for each $a\\in \\Sigma$, set\n$$f_G(a):=\\lbrace u\\mid a\\to u\\in P\\rbrace.$$ Then $f_G$ extends to a\nsubstitution $s_G:\\Sigma^*\\to 2^{\\Sigma^*}$. It is easy to see that\n$s_G(w)$ is just the set of words derivable from $w$ in one step:\n$s_G(w)=\\lbrace u\\mid w\\Rightarrow u\\rbrace$. In fact,\n$$L(G)=\\bigcup \\lbrace s_G^n(w)\\mid n\\ge 0\\rbrace,$$ where\n$s_G^0(w)=\\lbrace w\\rbrace$, and $s_G^{n+1}(w)=s_G(s_G^n(w))$.\n\nIn relation to languages described by the Chomsky hierarchy, we have the\nfollowing results:\n\n1.  Every L-language is context-free.\n\n2.  If an L-system $G=(\\Sigma,P,w)$ contains a constant production for\n    each symbol in $\\Sigma$, then $L(G)$ is context-free.\n\n3.  Denote the families of regular, context-free, context-sensitive, and\n    L-languages by $\\mathscr{R},\\mathscr{F},\\mathscr{S},\\mathscr{L}$,\n    and set $\\mathscr{X}_1=\\mathscr{R}$,\n    $\\mathscr{X}_2=\\mathscr{F}-\\mathscr{R}$, and\n    $\\mathscr{X}_2=\\mathscr{S}-\\mathscr{F}$. Then\n    $\\mathscr{L}\\cap \\mathscr{X}_i$ and\n    $\\overline{\\mathscr{L}}\\cap \\mathscr{X}_i$ are non-empty for\n    $i=1,2,3$. Here, $\\overline{\\mathscr{L}}$ is the complement of\n    $\\mathscr{L}$ in $2^{\\Sigma^*}$, the family of all languages over\n    $\\Sigma$.\n\n### Subsystems {#subsystems .unnumbered}\n\nAn L-system is said to be *deterministic* if every symbol in $\\Sigma$\nhas at most one (hence exactly one) production corresponding to it. A\ndeterministic L-system is also called a DL-system. Examples 1,4,5 above\nare DL-systems. For a DL-system, the associated substitution is a\nhomomorphism, which means that for each $n\\ge 0$, the set $s_G^n(w)$ is\na singleton, so we get a unique sequence of words $w_0, w_1, \\ldots$,\nsuch that $w_n\\Rightarrow w_{n+1}$. If $|w_n|<|w_{n+1}|$ for some $n$,\nthen the word sequence is infinite. In particular, if $w_n$ is a prefix\nof $w_{n+1}$ for all large enough $n$, and the lengths of the words have\nthe property that $|w_n|=|w_{n+1}|$ implies $|w_m|<|w_{m+1}|$ for some\n$m>n$, then the DL-system defines a unique infinite word (by taking the\nunion of all finite words). In Example 4 above, the infinite word we\nobtain is the famous Thue-Morse sequence (an infinite word is an\ninfinite sequence).\n\nAn L-system is said to be *propagating* if no productions are of the\nform $a\\to \\lambda$. A propagating L-system is also called a PL-system.\nAll examples above, except 3, are propagating. A DPL-system is a\ndeterministic propagating L-system. In a DPL-system, the lengths of the\nwords in the corresponding sequence are non-decreasing, and one may\nclassify DPL-systems by how fast these lengths grow.\n\n### Variations {#variations .unnumbered}\n\nThere are also ways one can extend the generative capacity of an\nL-system by generalizing some or all of the criteria defining an\nL-system. Below are some:\n\n1.  Create a partition of $\\Sigma=N\\cup T$, the set $N$ of non-terminals\n    and the set $T$ of terminals, so that only terminal words are\n    allowed in $L(G)$. Such a system is called an EL-system. Formally,\n    an EL-system is a 4-tuple $$H=(N,T,P,w)$$ such that\n    $G_H=(N\\cup T,P,w)$ is an L-system, and $L(H)=L(G_H)\\cap T^*$.\n\n2.  Notice that the productions in an L-system are context-free in the\n    sense that during a rewriting step, the rewriting of a symbol does\n    not depend on the \u201ccontext\u201d of the symbol (its neighboring symbols).\n    This is the reason why an L-system is also known as a 0L-system. We\n    can generalize an 0L-system by permitting context-sensitivity in the\n    productions. If the rewriting of a symbol depends both on its left\n    and right neighboring symbols, the resulting system is called a\n    2L-system. On the other hand, a 1L-system is a system such that\n    dependency is one-sided.\n\n    Formally, a 2L-system is a quadruple $$(\\Sigma, P, w,\\sqcup).$$ Both\n    $\\Sigma$ and $w$ are defined as in an L-system. $\\sqcup$ is a symbol\n    not in $\\Sigma$, denoting a blank space. $P$ is a subset of\n    $\\Sigma_1 \\times \\Sigma\\times \\Sigma_1 \\times \\Sigma^*$, where\n    $\\Sigma_1 = \\Sigma \\cup \\lbrace \\sqcup \\rbrace$, such that for every\n    $(a,b,c)\\in \\Sigma_1 \\times \\Sigma\\times \\Sigma_1$, there is a\n    $u\\in \\Sigma^*$ such that $(a,b,c,u)\\in P$. Elements of $P$ are\n    called productions, and are written $abc\\to u$ instead of\n    $(a,b,c,u)$. Rewriting works as follows: the binary relation\n    $\\Rightarrow$ on $\\Sigma^*$ called a rewriting step, is given by\n    $u\\Rightarrow v$ iff either $u=v$, or $u=a_1\\cdots a_n$ and\n    $v=v_1\\cdots v_n$, such that\n\n    1.  $\\sqcup a_1 a_2 \\to v_1$,\n\n    2.  $a_{i-1} a_i a_{i+1} \\to v_i$ where $i=2,\\cdots, n-1$, and\n\n    3.  $a_{n-1}a_n\\sqcup \\to v_n$.\n\n    If $n=2$, then productions of the second form above do not apply. If\n    $n=1$, then $\\sqcup a_1 \\sqcup \\to v_1$ are the only productions.\n\n    A 1L-system is then a 2L-system such that either, $abc \\to u$ for\n    some $c\\in \\Sigma_1$ implies $abd\\to u$ for all $d\\in \\Sigma_1$, or\n    $cab \\to u$ for some $c\\in \\Sigma_1$ implies $dab \\to u$ for all\n    $d\\in \\Sigma_1$.\n\n    It is easy to see that an L-system is a 2L-system such that if\n    $abc\\to u$ for some $a,c\\in \\Sigma_1$, then $dbe\\to u$ for all\n    $d,e\\in \\Sigma_1$.\n\n3.  Allow the possibility that not all of the symbols may be rewritten.\n    This means that $u\\Rightarrow v$ iff either $u=v$, or\n    $u=a_1\\cdots a_n$ and $v=v_1\\cdots v_n$, and either $a_i=v_i$ or\n    $a_i\\to v_i \\in P$.\n\n4.  Allow more than one axiom. In other words, the single axiom word $w$\n    is replaced by a set $W$ of axioms.\n\n[9]{} A. Salomaa, [*Formal Languages*]{}, Academic Press, New York\n(1973).",
  "language": "INFORMAL",
  "phrase": "Lindenmayer System",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LindenmayerSystem"
    }
  ],
  "indexable": true
}