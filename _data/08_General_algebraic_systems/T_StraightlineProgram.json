{
  "alternatePhrases": [],
  "definition": "Given a set $S$, a *straight-line program* (SLP) is a family of\nfunctions $\\mathcal{F}=\\{f_i:1\\leq i\\leq m\\}$\n$$f_{i}:S^{n+i}\\rightarrow S$$ for some fixed $n\\in\\mathbb{N}$. An SLP\nis *evaluated* on a tuple $(s_1,\\dots,s_n)$ by recursion in the\nfollowing way: $f_1$ is evaluated on $(s_1,\\dots,s_n)$ as a function.\nThe remaining evaluations are recursive. So $f_2(s_1,\\dots,s_n)$ denotes\n$$f_2(s_1,\\dots,s_n):=f_2(s_1,\\dots,s_n,f_1(s_1,\\dots,s_n)).$$ and in\ngeneral $$f_{i+1}(s_1,\\dots,s_n):=\nf_{i+1}(s_1,\\dots,s_n,f_1(s_1,\\dots,s_n),\\dots,f_i(s_1,\\dots,s_n)).$$\nThe final output $f_m(s_1,\\dots,s_n)$ is denoted\n$\\mathcal{F}(s_1,\\dots,s_n)$. In this way we treat $\\mathcal{F}$ as\nfunction from $S^n\\rightarrow S$.\n\nSLPs arrise from the multiple meansings of expressions of the sort $a^n$\nin a some algebraic structure $S$. First of all, one can formally treat\n$a^n$ as the word $a\\cdots a$ in $S$. Secondly this can be interpreted\nas the actual result of this mulitplication.\n\nIn the former meaning, actually storing a word of the form $a^n$ as\n$a\\cdots a$ is difficult hence it is abreviated. Other examples include\nwords such as $a^{10}(bc)^6$ where the values of $a,b,c$ are continually\nchanging or even unknown. Here an SLP can encode this word in such a way\nthat if we replace $a$ by $bc$, then the resulting new word would result\nsimply by evaluation the SLP at the input $(bc,b,c)$ instead of\n$(a,b,c)$.\n\nIn the second treatment where we whish to actually evaluate $a^n$ and\nthe like, we find the problem of understanding what $a^n$ means as a\nprogram. Certainly we may have $a^4=(aa)(aa)=a(a(aa))$ etc. However this\nequivalence neglects the problem of selecting a method of computing the\nresult. Usually an efficient method is desired. An SLP developed from\nsimple functions such as $f(x)=x^2$ and $f(x,y)=x+y$ formally address\nthis problem.\n\nThe term *straight-line* reflects the fact that evaluating an SLP can be\nachieved by a program which does not branch or loop so its execution is\na straight-line. It is common for SLPs to be built entirely from simple\nfunctions such as $f(x,y)=x+y$ or $f(x)=x\\times x$.\n\nBecause each element $f_i$ of an SLP is evaluated externally only on\n$s_1,\\dots,s_n$ and the remaining inputs come internally from previous\n$f_j$, $1\\leq j\\leq i$, it is convient to write definitions for $f_i$ as\ntaking inputs only from $(s_1,\\dots,s_n)$ and implicitly allowing for\nthe use of the outputs of previous $f_j$\u2019s.\n\nSLPs can be defined in contexts other than semigroups including rings,\nmodules, and polynomials. Although they arise naturally to compress\ncomputations, they are also useful in describing smaller bounds for many\ncombinatorial theorems related to algebraic objects.\n\nIt is possible for a function $f:S^n\\rightarrow S$ to be defined\nequivalently by multiple SLPs and so a notion of equality of SLPs is\nstronger than equivalence of final outputs.\n\nTwo SLPs $\\mathcal{F}=\\{f_i:1\\leq i\\leq m\\}$ and\n$\\mathcal{G}=\\{g_i:1\\leq i\\leq k\\}$ are *equivalent* if $\\mathcal{F}$\nand $\\mathcal{G}$ can be evaluated on the same inputs and for every\ninput $(s_1,\\dots,s_n)$,\n$\\mathcal{F}(s_1,\\dots,s_n)=\\mathcal{G}(s_1,\\dots,s_n)$. When and SLP\n$\\mathcal{F}$ is equivalent to a trivial SLP $\\{f:S^n\\rightarrow S\\}$ we\nsay that $\\mathcal{F}$ is an *SLP representation* of $f$.\n\nEvery function $f:S^n\\rightarrow S$ can be expressed as an SLP trivially\nby $\\mathcal{F}=\\{f\\}$. However, this SLP is typically the least optimal\nfor the actual evaluation of the output for a given input. This leads to\na hierarchy imposed on equivalent SLPs based on their associated\ncomputational length.\n\nIf an SLP represents an algebraic expression (alternatively a word in\nthe generators) in the semigroup $S$ then the *computational length* or\nsimply *length* of the SLP is the maximum number of multiplications in\nthe semigroup performed to evaluate the expression using the SLP.\n\nIt is evident that the trivial SLP of an algebraic expression has length\nequal to the length of the word.",
  "language": "INFORMAL",
  "phrase": "Straight-Line Program",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/StraightlineProgram"
    }
  ],
  "indexable": true
}