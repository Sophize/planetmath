{
  "alternatePhrases": [
    "DPDA"
  ],
  "definition": "A pushdown automaton $M=(Q,\\Sigma,\\Gamma,T,q_0,\\bot,F)$ is usually\ncalled \u201cnon-deterministic\u201d because the image of the transition function\n$T$ is a subset of $Q\\times \\Gamma^*$, which may possibly contain more\nthan one element. In other words, the transition from one configuration\nto the next is not uniquely determined. When there is uniqueness, $M$ is\ncalled \u201cdeterministic\u201d.\n\nFormally, a *deterministic pushdown automaton*, or *DPDA* for short, is\na non-deterministic pushdown automaton\n$M=(Q,\\Sigma,\\Gamma,T,q_0,\\bot,F)$ where the transition function $T$ has\nthe following properties: for any $p\\in Q$, $a\\in \\Sigma$, and\n$A\\in \\Gamma$,\n\n1.  $T(p,a,A)\\cup T(p,\\lambda,A)$ is at most a singleton,\n\n2.  $T(p,a,A)\\cap T(p,\\lambda,A)=\\varnothing$.\n\nThe properties can be interpreted as follows: given any configuration of\n$M$, if there is a transition to the next configuration, the transition\nmust be unique. The second property just insures that\n$T(p,a,A)\\ne T(p,\\lambda,A)$, so that when a $\\lambda$-transition is\npossible for a given $(p,A)$, no other transitions are possible for the\nsame $(p,A)$.\n\nThe way a DPDA works is exactly the same as an NPDA, with several modes\nof acceptance: acceptance on final state, acceptance on empty stack, and\nacceptance on final state and empty stack. However, unlike a NPDA, these\nacceptance methods are not equivalent. It can be shown that the set\n$\\mathscr{E}$ of languages accepted on empty stack is a proper subset of\nthe set $\\mathscr{F}$ of languages determined on final state. In fact,\nevery language in $\\mathscr{E}$ is prefix-free, while some languages in\n$\\mathscr{F}$ are not.\n\nNevertheless, any regular language can be accepted by a DPDA on empty\nstack, and any language accepted by a DPDA on final state is\nunambiguous, and, as a result, $\\mathscr{F}$ is a proper subset of the\nfamily of all context-free languages. This is quite unlike the case for\nfinite automata: every non-deterministic finite automaton is equivalent\nto a deterministic finite automaton. A language in $\\mathscr{F}$ called\na *deterministic language*.\n\nSome examples: the set of palindromes\n$\\lbrace u \\in \\Sigma^* \\mid u = \\operatorname{rev}(u) \\rbrace$ is\nunambiguous, but not deterministic. The language\n$\\lbrace a^m b^n \\mid m \\ge n \\ge 0 \\rbrace$ is deterministic, but not\nprefix-free, and hence can not be accepted by any DPDA on empty stack.\nThe language $\\lbrace a^n b^n \\mid n\\ge 0 \\rbrace$ can be accepted by a\nDPDA on empty stack, but is not regular.\n\nAny formal grammar that generates a deterministic language is said to be\n*deterministic context-free*. A deterministic context-free grammar can\nbe described by what is known as the grammars.\n\nThe family of deterministic languages is closed under complementation,\nintersection with a regular language, but not arbitrary (finite)\nintersection, and hence not union.\n\n**Remark**. The reason why $\\mathscr{E}\\ne \\mathscr{F}$ can be traced\nback to the definition of a DPDA: it allows for the following\npossibilities for a DPDA $M$:\n\n-   $M$ completely stops reading an input word because either there are\n    no available transitions from one configuration to the next:\n    $$T(p,a,A)\\cup T(p,\\lambda,A)=\\varnothing,$$ or the stack is emptied\n    before the last input symbol is read: a configuration\n    $(p,u,\\lambda)$ is reached and $u$ is not empty.\n\n-   $M$ consumes the last input symbol, and continues processing because\n    of $\\lambda$-transitions.\n\nSome authors consider these imperfections of $M$ as being\n\u201cnon-deterministic\u201d, and put additional constraints on $M$, such as\nmaking sure $T$ is a total function, the stack is never empty, and\ndelimiting input strings.\n\n[9]{} A. Salomaa [*Computation and Automata, Encyclopedia of Mathematics\nand Its Applications, Vol. 25*]{}. Cambridge (1985). S. Ginsburg, [*The\nMathematical Theory of Context-Free Languages*]{}, McGraw-Hill, New York\n(1966). D. C. Kozen, [*Automata and Computability*]{}, Springer, New\nYork (1997). J.E. Hopcroft, J.D. Ullman, [*Formal Languages and Their\nRelation to Automata*]{}, Addison-Wesley, (1969).",
  "language": "INFORMAL",
  "phrase": "Deterministic Pushdown Automaton",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/DeterministicPushdownAutomaton"
    }
  ],
  "indexable": true
}