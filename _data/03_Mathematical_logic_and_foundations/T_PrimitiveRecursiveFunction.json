{
  "alternatePhrases": [
    "primitive recursive"
  ],
  "definition": "To define what a primitive recursive function is, the following\nnotations are used:\n\n> $\\mathcal{F} = \\bigcup \\lbrace F_k \\mid k \\in \\mathbb{N}\n> \\rbrace$, where for each\n> $k \\in \\mathbb{N}\\text{, }F_k = \\lbrace f \\mid f \\colon \\mathbb{N}^{k}\n> \\to \\mathbb{N} \\rbrace$.\n\n**Definition**. The set of *primitive recursive functions* is the\nsmallest subset $\\mathcal{PR}$ of $\\mathcal{F}$ where:\n\n1.  (zero function) $z \\in \\mathcal{PR}\\cap F_1$, given by $z(n):=0$;\n\n2.  (successor function) $s \\in \\mathcal{PR}\\cap F_1$, given by\n    $s(n):=n+1$;\n\n3.  (projection functions) $p^k_m \\in \\mathcal{PR}\\cap F_k$, where\n    $m\\le k$, given by $p^k_m(n_1,\\ldots,n_k):=n_m$;\n\n4.  $\\mathcal{PR}$ is closed under composition: If\n    $\\lbrace g_1, \\ldots, g_m \\rbrace \\subseteq \\mathcal{PR} \\cap F_{k}$\n    and $h \\in \\mathcal{PR} \\cap F_m$, then\n    $f \\in \\mathcal{PR} \\cap F_{k}$, where\n    $$f(n_1,\\ldots, n_k) = h(g_1(n_1,  \\ldots, n_k), \\ldots, g_m(n_1,\\ldots, n_k));$$\n\n5.  $\\mathcal{PR}$ is closed under primitive recursion: If\n    $g \\in \\mathcal{PR} \\cap F_{k}$ and\n    $h \\in \\mathcal{PR} \\cap F_{k+2}$, then\n    $f \\in \\mathcal{PR}\\cap F_{k+1}$, where $$\\begin{aligned}\n            f(n_1, \\ldots, n_k, 0) &=& g(n_1, \\ldots, n_k) \\\\ \n            f(n_1, \\ldots, n_k, s(n)) &=& h(n_1,  \\ldots, n_k, n, f(n_1, \\ldots, n_k, n)).\n            \\end{aligned}$$\n\nMany of the arithmetic functions that we encounter in basic math are\nprimitive recursive, including addition, multiplication, and\nexponentiation. More examples can be found in .\n\nPrimitive recursive functions are computable by Turing machines. In\nfact, it can be shown that $\\mathcal{PR}$ is precisely the set of\nfunctions computable by programs using FOR NEXT loops. However, not all\nTuring-computable functions are primitive recursive: the Ackermann\nfunction is one such example.\n\nSince $\\mathcal{F}$ is countable, so is $\\mathcal{PR}$. Moreover,\n$\\mathcal{PR}$ is recursively enumerable (can be listed by a Turing\nmachine).\n\n**Remarks**.\n\n1.  Every primitive recursive function is total, since it is built from\n    $z$, $s$, and $p^k_m$, each of which is total, and that functional\n    composition, and primitive recursion preserve totalness. By\n    including $\\varnothing$ in $\\mathcal{PR}$ above, and close it by\n    functional composition and primitive recursion, one gets the set of\n    *partial primitive recursive functions*.\n\n2.  Primitive recursiveness can be defined on subsets of $\\mathbb{N}^k$:\n    a subset $S\\subseteq \\mathbb{N}^k$ is *primitive recursive* if its\n    characteristic function $\\varphi_S$, which is defined as\n    $$\\varphi_S(x):= \\left\\{\n    \\begin{array}{ll}\n    1 & \\textrm{if } x \\in S, \\\\\n    0 & \\textrm{otherwise.}\n    \\end{array}\n    \\right.$$ is primitive recursive.\n\n3.  Likewise, primitive recursiveness can be defined for predicates over\n    tuples of natural numbers. A predicate $\\Phi(\\boldsymbol{x})$, where\n    $\\boldsymbol{x}\\in \\mathbb{N}^k$, is said to be *primitive\n    recursive* if the set\n    $S(\\Phi):=\\lbrace \\boldsymbol{x}\\mid \\Phi(\\boldsymbol{x})\\rbrace$ is\n    primitive recursive.",
  "language": "INFORMAL",
  "phrase": "Primitive Recursive Function",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/PrimitiveRecursiveFunction"
    }
  ],
  "indexable": true
}