{
  "alternatePhrases": [
    "bounded sum"
  ],
  "definition": "One useful way of generating more primitive recursive functions from\nexisting ones is through what is known as *bounded summation* and\n*bounded product*. Given a primitive recursive function\n$f:\\mathbb{N}^{m+1} \\to \\mathbb{N}$, define two functions\n$f_s,f_p:\\mathbb{N}^{m+1} \\to \\mathbb{N}$ as follows: for\n$\\boldsymbol{x}\\in \\mathbb{N}^m$ and $y\\in \\mathbb{N}$:\n$$f_s(\\boldsymbol{x},y):=\\sum_{i=0}^y f(\\boldsymbol{x},i)$$\n$$f_p(\\boldsymbol{x},y):=\\prod_{i=0}^y f(\\boldsymbol{x},i)$$\n\nThese are easily seen to be primitive recursive, because they are\ndefined by primitive recursion. For example,\n$$f_s(\\boldsymbol{x},0)=f(\\boldsymbol{x},0),\\quad \\mbox{and}\\quad f_s(\\boldsymbol{x},n+1)= g(\\boldsymbol{x},n,f_s(\\boldsymbol{x},n)),$$\nwhere $g(\\boldsymbol{x},n,y)=\\operatorname{add}(f(\\boldsymbol{x},n),y)$,\nwhich is primitive recursive by functional composition.\n\n**Definition**. We call $f_s$ and $f_p$ functions obtained from $f$ by\n*bounded sum* and *bounded product* respectively.\n\nUsing bounded summation and bounded product, another useful class of\nprimitive recursive functions can be generated:\n\n**Definition**. Let $f:\\mathbb{N}^{m+1}\\to \\mathbb{N}$ be a function.\nFor each $y\\in \\mathbb{N}$, set\n$$A_f(\\boldsymbol{x},y):=\\lbrace z\\in \\mathbb{N}\\mid z\\le y \\mbox{ and }f(\\boldsymbol{x},z)=0\\rbrace.$$\nDefine $$f_{bmin}(\\boldsymbol{x},y):= \\left\\{\n\\begin{array}{ll}\n\\min A_f(\\boldsymbol{x},y) & \\textrm{if } A_f(\\boldsymbol{x},y) \\ne \\varnothing, \\\\\ns(y) & \\textrm{otherwise.}\n\\end{array}\n\\right.$$ $f_{bmin}$ is called the function obtained from $f$ by\n*bounded minimization*, and is usually denoted\n$$\\mu z\\le y (f(\\boldsymbol{x},z)=0).$$\n\nIf $f:\\mathbb{N}^{m+1}\\to \\mathbb{N}$ is primitive recursive, so is\n$f_{bmin}$.\n\nDefine $g:=\\operatorname{sgn}\\circ f$. Then\n$$g(\\boldsymbol{x},y):= \\left\\{\n\\begin{array}{ll}\n0 & \\textrm{if } f(\\boldsymbol{x},y)=0, \\\\\n1 & \\textrm{otherwise.}\n\\end{array}\n\\right.$$ As $f$ is primitive recursive, so is $g$, since the sign\nfunction $\\operatorname{sgn}$ is primitive recursive (see ).\n\nNext, the function $g_p$ obtained from $g$ by bounded product has the\nfollowing properties:\n\n-   if $g_p(\\boldsymbol{x},y)=1$, then $g_p(\\boldsymbol{x},z)=1$ for all\n    $z<y$,\n\n-   if $g_p(\\boldsymbol{x},y)=0$, then $g_p(\\boldsymbol{x},z)=0$ for all\n    $z\\ge y$.\n\nFinally, the function $(g_p)_s$ obtained from $g_p$ by bounded sum has\nthe property that, when applied to $(\\boldsymbol{x},y)$, counts the\nnumber of $z\\le y$ such that $g_p(\\boldsymbol{x},z)=1$. Based on the\nproperty of $g_p$, this count is then exactly the least $z\\le y$ such\nthat $g_p(\\boldsymbol{x},z)=1$. This means that $(g_p)_s=f_{bmin}$ for\nall $(\\boldsymbol{x},y)\\in \\mathbb{N}^{m+1}$. Since $g_p$ is primitive\nrecursive, so is $(g_p)_s$, or that $f_{bmin}$ is primitive recursive.\n\nIn fact, if $f$ is a (total) recursive function, so is $f_{bmin}$,\nbecause all of the derived functions in the proof above preserve\nprimitive recursiveness as well as totalness.\n\n**Remarks**.\n\n-   In the definition of bounded minimization, if we take the $y$ out,\n    then we arrive at the notion of *unbounded minimization*, or just\n    *minimization*. The proposition above shows that the set\n    $\\mathcal{PR}$ of primitive recursive functions is closed under\n    bounded minimization. However, $\\mathcal{PR}$ is not closed under\n    minimization. The closure of $\\mathcal{PR}$ under minimization is\n    the set $\\mathcal{R}$ of recursive functions (total or not).\n\n-   It is not hard to show that $\\mathcal{ER}$, the set of all\n    elementary recursive functions, is closed under bounded\n    minimization.",
  "language": "INFORMAL",
  "phrase": "Bounded Minimization",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/BoundedMinimization"
    }
  ],
  "indexable": true
}