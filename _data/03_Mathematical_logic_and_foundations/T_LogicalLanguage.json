{
  "alternatePhrases": [],
  "definition": "In its most general form, a *logical language* is a set of rules for\nconstructing *formulas* for some logic, which can then be assigned truth\nvalues based on the rules of that logic.\n\nA logical language $\\mathcal{L}$ consists of:\n\n-   A set $F$ of function symbols (common examples include $+$ and\n    $\\cdot$)\n\n-   A set $R$ of relation symbols (common examples include $=$ and $<$)\n\n-   A set $C$ of logical connectives (usually $\\neg$, $\\wedge$, $\\vee$,\n    $\\rightarrow$ and $\\leftrightarrow$)\n\n-   A set $Q$ of quantifiers (usuallly $\\forall$ and $\\exists$)\n\n-   A set $V$ of variables\n\nEvery function symbol, relation symbol, and connective is associated\nwith an arity (the set of $n$-ary function symbols is denoted $F_n$, and\nsimilarly for relation symbols and connectives). Each quantifier is a\ngeneralized quantifier associated with a quantifier type\n$\\langle n_1,\\ldots,n_n\\rangle$.\n\nThe underlying logic has a (possibly empty) set of types $T$. There is a\nfunction $\\operatorname{Type}:F\\cup V\\rightarrow T$ which assignes a\ntype to each function and variable. For each arity $n$ is a function\n$\\operatorname{Inputs}_n:F_n\\cup R_n\\rightarrow T^n$ which gives the\ntypes of each of the arguments to a function symbol or relation. In\naddition, for each quantifier type $\\langle n_1,\\ldots,n_n\\rangle$ there\nis a function $\\operatorname{Inputs}_{\\langle n_1,\\ldots,n_n\\rangle}$\ndefined on $Q_{\\langle n_1,\\ldots,n_n\\rangle}$ (the set of quantifiers\nof that type) which gives an $n$-tuple of $n_i$-tuples of types of the\narguments taken by formulas the quantifier applies to.\n\nThe *terms* of $\\mathcal{L}$ of type $t\\in T$ are built as follows:\n\n1.  If $v$ is a variable such that $\\operatorname{Type}(v)=t$ then $v$\n    is a term of type $t$\n\n2.  If $f$ is an $n$-ary function symbol such that\n    $\\operatorname{Type}(f)=t$ and $t_1,\\ldots,t_n$ are terms such that\n    for each $i<n$\n    $\\operatorname{Type}(t_i)=(\\operatorname{Inputs}_n(f))_i$ then\n    $ft_1,\\ldots,t_n$ is a term of type $t$\n\nThe *formulas* of $\\mathcal{L}$ are built as follows:\n\n1.  If $r$ is an $n$-ary relation symbol and $t_1,\\ldots,t_n$ are terms\n    such that $\\operatorname{Type}(t_i)=(\\operatorname{Inputs}_n(r))_i$\n    then $rt_1,\\ldots,t_n$ is a formula\n\n2.  If $c$ is an $n$-ary connective and $f_1,\\ldots,f_n$ are formulas\n    then $cf_1,\\ldots,f_n$ is a formula\n\n3.  If $q$ is a quantifier of type $\\langle n_1,\\ldots,n_n\\rangle$,\n    $v_{1,1},\\ldots,v_{1,n_1},v_{2,1},\\ldots,v_{n,1},\\ldots,v_{n,n_n}$\n    are a sequence of variables such that\n    $\\operatorname{Type}(v_{i,j})=((\\operatorname{Inputs}_{\\langle n_1,\\ldots,n_n\\rangle}(q))_j)_i$\n    and $f_1,\\ldots,f_n$ are formulas then\n    $qv_{1,1},\\ldots,v_{1,n_1},v_{2,1},\\ldots,v_{n,1},\\ldots,v_{n,n_n}f_1,\\ldots,f_n$\n    is a formula\n\nGenerally the connectives, quantifiers, and variables are specified by\nthe appropriate logic, while the function and relation symbols are\nspecified for particular languages. Note that $0$-ary functions are\nusually called *constants*.\n\nIf there is only one type which is equated directly with truth values\nthen this is essentially a propositional logic. If the standard\nquantifiers and connectives are used, there is only one type, and one of\nthe relations is $=$ (with its usual semantics), this produces first\norder logic. If the standard quantifiers and connectives are used, there\nare two types, and the relations include $=$ and $\\in$ with appropriate\nsemantics, this is second order logic (a slightly different formulation\nreplaces $\\in$ with a $2$-ary function which represents function\napplication; this views second order objects as functions rather than\nsets).\n\nNote that often connectives are written with infix notation with\nparentheses used to control order of operations.",
  "language": "INFORMAL",
  "phrase": "Logical Language",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LogicalLanguage"
    }
  ],
  "indexable": true
}