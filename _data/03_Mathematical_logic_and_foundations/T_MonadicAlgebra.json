{
  "alternatePhrases": [],
  "definition": "Let $B$ be a Boolean algebra. An *existential quantifier operator* on\n$B$ is a function $\\exists: B\\to B$ such that\n\n1.  $\\exists(0)=0$,\n\n2.  $a\\le \\exists(a)$, where $a\\in B$, and\n\n3.  $\\exists(a\\wedge \\exists(b))=\\exists(a)\\wedge \\exists(b)$, where\n    $a,b\\in B$.\n\nA *monadic algebra* is a pair $(B,\\exists)$, where $B$ is a Boolean\nalgebra and $\\exists$ is an existential quantifier operator.\n\nThere is an obvious connection between an existential quantifier\noperator on a Boolean algebra and an existential quantifier in a first\norder logic:\n\n1.  A statement $\\varphi(x)$ is false iff $\\exists x \\varphi(x)$ is\n    false. For example, suppose $x$ is a real number. Let $\\varphi(x)$\n    be the statement $x=x+1$. Then $\\varphi(x)$ is false no matter what\n    $x$ is. Likewise, $\\exists \\varphi(x)$ is always false too.\n\n2.  $\\varphi(x)$ implies $\\exists x\\varphi(x)$; in other words, if\n    $\\exists x\\varphi(x)$ is false, then so is $\\varphi(x)$. For\n    example, let $\\varphi(x)$ be the statement $1<x$, where\n    $x\\in \\mathbb{R}$. By itself, $\\varphi(x)$ is neither true nor\n    false. However $\\exists x\\varphi(x)$ is always true.\n\n3.  $\\exists x (\\varphi(x) \\wedge \\exists x \\psi(x))$ iff\n    $\\exists x \\varphi(x) \\wedge \\exists x \\psi(x)$. For example,\n    suppose again $x$ is real. Let $\\varphi(x)$ be the statement $x<1$\n    and $\\psi(x)$ the statement $x>1$. Then both $\\exists x \\psi(x)$ and\n    $\\exists x \\varphi(x)$ are true. It is easy to verify the\n    equivalence of the two sentences in this example. Notice that,\n    however, $\\exists x (\\varphi(x) \\wedge \\psi(x))$ is false.\n\n**Remarks**\n\n-   One may replace condition 3. above with the following three\n    conditions to get an equivalent definition of an existential\n    quantifier operator:\n\n    1.  $\\exists(\\exists(a)) = \\exists(a)$\n\n    2.  $\\exists (a\\vee b)=\\exists(a) \\vee \\exists(b)$\n\n    3.  $\\exists ((\\exists a)')=(\\exists a)'$\n\n    From this, it is easy to see that $\\exists$ is a closure operator on\n    $B$, and that $\\exists a$ and $(\\exists a)'$ are both closed under\n    $\\exists$.\n\n-   Like the Lindenbaum algebra of propositional logic, monadic algebra\n    is an attempt at converting first order logic into an algebra so\n    that a logical question may be turned into an algebraic one.\n    However, the existential quantifier operator in a monadic algebra\n    corresponds to existential quantifier applied to formulas with only\n    one variable (hence the name monadic). Formulas with multiple\n    variables, such as $x^2+y^2=1$, $x\\le y+z$, or $x_i=x_{i+1}+x_{i+2}$\n    where $i=0,1,2,\\ldots$ require further generalizations to what is\n    known as a *polyadic algebra*. The notions of monadic and polyadic\n    algebras were introduced by Paul Halmos.\n\nDual to the notion of an existential quantifier is that of a universal\nquantifier. Likewise, there is a dual of an existential quantifier\noperator on a Boolean algebra, a *universal quantifier operator*.\nFormally, a *universal quantifier operator* on a Boolean algebra $B$ is\na function $\\forall : B\\to B$ such that\n\n1.  $\\forall (1) = 1$,\n\n2.  $\\forall (a) \\le a$, where $a\\in B$, and\n\n3.  $\\forall(a \\vee \\forall(b)) = \\forall(a) \\vee \\forall(b)$, where\n    $a,b\\in B$.\n\nEvery existential quantifier operator $\\exists$ on a Boolean algebra $B$\ninduces a universal quantifier operator $\\forall$, given by\n$$\\forall (a) := (\\exists (a'))'.$$ Conversely, every universal\nquantifier operator induces an existential quantifier by exchanging\n$\\forall$ and $\\exists$ in the definition above. This shows that the two\noperations are dual to one another.\n\n[8]{} P. Halmos, S. Givant, *Logic as Algebra*, The Mathematical\nAssociation of America (1998).",
  "language": "INFORMAL",
  "phrase": "Monadic Algebra",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/MonadicAlgebra"
    }
  ],
  "indexable": true
}