{
  "alternatePhrases": [
    "trim automaton",
    "coaccessible"
  ],
  "definition": "Word acceptance is the primary function of an automaton. When a word is\nfed into an automaton at an initial state, it is accepted exactly when a\nfinal state is reached upon reading the last symbol of the word. So when\na state does not contribute in anyway to word acceptance, it may be\ntossed out without changing the accepting power of the automaton.\n\n**Definition**. Let $A=(S,\\Sigma,\\delta,I,F)$ be an automaton. A state\n$s\\in S$ is said to be *reachable* from a state $t\\in S$, if for some\nword $u$ over $\\Sigma$, $t\\in \\delta(s,u)$. A state is said to be\n*accessible* if it is reachable from a start state. A state is *live* or\n*coaccessible* if a final state can be reached from it. If a state is\nboth accessible and live, then it is called *useful*.\n\nClearly, every start state is accessible, and every final state is live.\nThe following is the state diagram of an automaton that illustrates the\nconcepts defined above.\n\nStates $\\sigma,p,r,s$ are accessible, while states $\\sigma,p,q$ are\nlive. So the useful states are $\\sigma$ and $p$.\n\nThe automaton $A$ is said to be *accessible* if every state in $S$ is\naccessible, and is *live* if every state is live. $A$ is called\n*simplified* or *trim* if it is both accessible and live (every state is\nuseful).\n\nAn automaton is to a simplified automaton iff it accepts at least one\nword.\n\nSuppose an automaton $A$ is equivalent to a simplified automaton $A'$.\nThen the set of start states of $A'$ is non-empty, say containing a\nstate $q$. So $q$ is live, which means there is a word $u$ such that\n$\\delta(p,u)$ contains a final state, or that $u\\in L(A')=L(A)$.\n\nConversely, suppose an automaton $A=(S,\\Sigma,\\delta,I,F)$ accepts a\nword $u$. This means that there is a start state $q$ and a final state\n$r$ such that $r\\in \\delta(q,u)$, so that both $q$ and $r$ are useful.\nNow, let $S'$ be the subset (of $S$) all useful states in $A$, and let\n$I'=I\\cap S'$, $F'=F\\cap S'$. Then neither $I'$ nor $F'$ is empty.\nFinally, let $\\delta'$ be the restriction of $\\delta$ on the set\n$S'\\times \\Sigma$, such that $$\\delta'(s,a) := \\delta(s,a)\\cap S'.$$\nThen the five-tuple $A':=(S',\\Sigma,\\delta',I',F')$ is an automaton.\nObviously, $L(A')\\subseteq L(A)$. On the other hand, the word $u$ above\nis accepted by $A'$. Since $u$ is arbitrary, we see that $L(A')=L(A)$ as\na result.\n\n**Remark**. If we allow the start state set of an automaton to be empty,\nthen every automaton can be simplified, whether or not it accepts any\nwords.\n\nIn the example above, the automaton is equivalent to the following\nsimplified automaton:\n\nHowever, the construction in the proof shows that, given a deterministic\nautomaton $A$, the simplified automaton $A'$ may not be determinstic. In\nthe example above, $A'$ is not deterministic because\n$\\delta(\\sigma,b)=\\varnothing$. With respect to deterministic automata,\nthe best we can do is the following:\n\nA deterministic automaton is to a deterministic accessible automaton.\n\nThe proof of this is very similar to the one given above, except\n$S',I'$, and $F'$ now consist of all accessible states, and $\\delta'$ is\njust a restriction on the domain of $\\delta$, since if a state $s$ is\naccessible, so is any state in $\\delta(s,a)$ for any $a\\in \\Sigma$.\n\nAgain, referring the example above, $A$ is deterministic, and it is\nequivalent to the following deterministic accessible automaton:\n\nThe language accepted by the automaton is represented by the regular\nexpression $a(ab)^*$.",
  "language": "INFORMAL",
  "phrase": "Simplified Automaton",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/SimplifiedAutomaton"
    }
  ],
  "indexable": true
}