{
  "alternatePhrases": [],
  "definition": "Two automata are said to be *equivalent* if they accept the same\nlanguage. Explicitly, if $A_1=(S_1,\\Sigma_1,\\delta_1,I_1,F_1)$ and\n$A_2=(S_2,\\Sigma_2,\\delta_2,I_2,F_2)$ are two automata, then $A_1$ is\nequivalent to $A_2$ if $L(A_1)=L(A_2)$. We write $A_1\\sim A_2$ when they\nare equivalent. It is clear that $\\sim$ is an equivalence relation on\nthe class of automata.\n\nFirst, note that if $A_1\\sim A_2$, then every symbol\n$\\alpha\\in \\Sigma_1$ in a word $a\\in L(A_1)$ is a symbol $\\alpha$ in\n$\\Sigma_2$. In other words, every symbol in a word accepted by $A_1$ (or\n$A_2$) belongs to $\\Sigma:=\\Sigma_1\\cap \\Sigma_2$. As a result,\n$L(A_1)=L(A_2)\\subseteq \\Sigma^*$. If $B_i$ is an automaton obtained\nfrom $A_i$ by replacing the alphabet $\\Sigma_i$ with $\\Sigma$, where\n$i=1,2$, then $B_i\\sim A_i$. This shows that we may, without loss of\ngenerality, assume outright, in the definition of equivalence of $A_1$\nand $A_2$, that they have the same underlying alphabet.\n\nThe most striking aspect of equivalence of automata is the following:\n\nEvery non-deterministic automaton is equivalent to a deterministic one.\n\nSuppose $A=(S_1,\\Sigma,\\delta_1,I_1,F_1)$ be a non-deterministic\nautomaton. We seek a deterministic automaton\n$B=(S_1,\\Sigma, \\delta_2,I_2,F_2)$ such that $A\\sim B$. Recall that the\ndifference between $A$ and $B$ lie in the transition functions:\n$\\delta_1$ is a function from $S_1\\times \\Sigma$ to $P(S_1)$, whereas\n$\\delta_2$ is a function from $S_2\\times \\Sigma$ to $S_2$, and the fact\nthat $I_2$ is required to be a singleton. The key to finding $B$ is to\nrealize that $\\delta_1$ can be converted into a function from\n$P(S_1)\\times \\Sigma$ to $P(S_1)$.\n\nNow, define $S_2:=P(S_1)$, $I_2:=I_1$. For $T\\subseteq S_1$ and\n$\\alpha\\in \\Sigma$, let\n$$\\delta_2(T,\\alpha):=\\bigcup_{s\\in T} \\delta_1(s,\\alpha).$$ As usual,\nwe extend $\\delta_2$ so it is defined on all of $S_2\\times \\Sigma^*$. We\nwant to show that $$\\delta_2(\\lbrace s\\rbrace, a)=\\delta_1(s,a)$$ for\nany $s\\in S_1$ and any $a\\in \\Sigma^*$. This can be done by induction on\nthe length of $a$:\n\n-   if $a=\\lambda$, then\n    $\\delta_2(\\lbrace s\\rbrace,\\lambda)=\\lbrace s\\rbrace = \\delta_1(s,\\lambda)$\n    by definition;\n\n-   if $a\\in \\Sigma$, then\n    $\\delta_2(\\lbrace s\\rbrace, a)=\\bigcup_{s\\in\\lbrace s\\rbrace}\\delta_1(s,a)=\\delta_1(s,a)$,\n    again by definition;\n\n-   if $a=b\\alpha$, where $b\\in \\Sigma^*$ and $\\alpha\\in \\Sigma$, then\n    by the induction step, $\\delta_2(\\lbrace s\\rbrace,b)=\\delta_1(s,b)$,\n    so that\n    $\\delta_2(\\lbrace s\\rbrace,a)= \\delta_2(\\lbrace s\\rbrace,b\\alpha)=\\delta_2(\\delta_2(\\lbrace s\\rbrace,b),\\alpha) = \\delta_2(\\delta_1(s,b),\\alpha)=\\bigcup_{t\\in \\delta_1(s,b)} \\delta_1(t,\\alpha)=\\delta_1(\\delta_1(s,b),\\alpha)=\\delta_1(s,b\\alpha)=\\delta_1(s,a)$.\n\nSuppose $a$ is accepted by $A$, so that\n$\\delta_1(s,a)\\cap F_1\\ne \\varnothing$ for some $s\\in I_1$. Then\n$$\\delta_2(I_2, a)=\\bigcup_{s\\in I_2} \\delta_1(s,a)=\\bigcup_{s\\in I_1} \\delta_1(s,a),$$\nwhich has non-empty intersection with $F_1$. So, we want $F_2$ to\nconsists of every element of $S_2$ that has non-empty intersection with\n$F_1$. Formally, we define\n$F_2:=\\lbrace F\\subseteq S_1\\mid F\\cap F_1\\ne \\varnothing\\rbrace$. So\nwhat we have just shown is that $L(A)\\subseteq L(B)$.\n\nOn the other hand, if $a$ is accepted by $B$, then (1) above says that\n$\\bigcup_{s\\in I_1} \\delta_1(s,a) \\in F_2$, or\n$(\\bigcup_{s\\in I_1} \\delta_1(s,a))\\cap F_1\\ne \\varnothing$, or\n$\\delta_1(s,a)\\cap F_1\\ne \\varnothing$ for some $s\\in I_1$, which means\n$a$ is accepted by $A$, proving the proposition.",
  "language": "INFORMAL",
  "phrase": "Equivalent Automata",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/EquivalentAutomata"
    }
  ],
  "indexable": true
}