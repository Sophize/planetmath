{
  "alternatePhrases": [],
  "definition": "A pairing function is a function\n$P \\colon \\mathbb{Z}_+^2 \\to \\mathbb{Z}_+$ which establishes a\none-to-one correspondence between $\\mathbb{Z}_+^2$ and $\\mathbb{Z}_+$.\nSuch functions are useful in the theory of recursive functions because\nthey allow one to express recursive functions of $m$ variables in terms\nof recursive functions of $n$ variables with $m \\ne n$.\n\nTwo examples of pairing functions are the following;\n$$P_1 (x,y) = (x+y)(x+y+1)/2 + y$$ $$P_2 (x,y) = 2^x (2y + 1) - 1$$\n\nIt is not hard to see that these functions are recursive (actually,\nprimitive recursive). For instance, one could use the recursion\nrelations and initial conditions $$P_1 (x+1,y) = P_1(x,y) + x + y + 1$$\n$$P_1 (0,y) = T(y) + y$$ $$T(y+1) = T(y) + y + 1$$ $$T(0) = 0$$ where\n$T(n)$ is the $n$-th triangular number to show that $P_1$ is recursive.\nLikewise, one could use the recursions\n$$P_2 (x+1,y) = P_2 (x,y) + P_2 (x,y)$$ $$P_2 (0,y) = y + y$$ to show\nthat $P_2$ is recursive.\n\nAn easy way to see that $P_1$ effects a one-to-one correspondence\nbetween $\\mathbb{Z}_+^2$ and $\\mathbb{Z}_+$ is as follows: Define the\n\u201csuccessor\u201d of a pair $(x,y) \\in \\mathbb{Z}_+^2$ to be the pair\n$(x-1,y+1)$ when $x\\neq0$; otherwise, when $x=0$, the successor is\n$(y+1,0)$. It is easy to see that every pair has a successor and that\nevery pair except $(0,0)$ is the successor of exactly one other pair.\nWith this definition of successor, the set of pairs of positive integers\nsatisfies the Peano axioms and, hence, is isomorphic to the integers.\nFrom the definition of $P_1$ it follows that, if $(x',y')$ is the\nsuccessor of $(x,y)$, then $P_1 (x',y') = P(x,y) + 1$ and that\n$P_1(0,0) = 0$. This means that $P_1$ is the isomorphism described two\nsentences ago.\n\nThat $P_2$ effects a one-to-one correspondence between positive integers\nand pairs of positive integers follows readily from uniqueness of\nfactorization of integers. On the one hand, for any number $z$, one can\nfind numbers $x$ and $y$ such that $z = P_2 (x,y)$ by factoring $z+1$\nand letting $x$ be the power of $2$ which appears in the factorization.\nOn the other hand, this is the only solution of $z = P_2 (x,y)$ because\nprime factorization is unique.\n\nSince a pairing function $P$ sets up a 1-1 correspondence between\n$\\mathbb{Z}_+$ and $\\mathbb{Z}_+^n$, there exist uniquely defined\nunpairing functions $R$ and $L$ such that $$P(L(x),R(x)) = x$$ It is not\nhard to show that, if $P$ is recursive, $R$ and $L$ will also be\nrecursive.\n\nOnce one has a pairing function $P^{(2)}$, one can use it to set up 1-1\ncorrespondences between $\\mathbb{Z}_+$ and $\\mathbb{Z}_+^n$ for any $n$.\nFor instance, one could define\n$$P^{(3)} (x,y,z) = P^{(2)} (x, P^{(2)}(y,z))$$\n$$P^{(4)} (x,y,z,w) = P^{(2)} (x, P^{(3)}(y,z,w)) = P^{(2)} (x,P^{(2)}(y, P^{(2)}(z,w)))$$\nIn general,\n$$P^{(n+1)} (x_1, \\ldots, x_{n+1}) = P^{(2)} (x_1, P^{(n)} (x_2, \\ldots, x_n))$$\n(This manner of encoding a list one pair at a time will be familiar to\nanyone who has programmed a computer in LISP. In fact, LISP was designed\nto be serve as a mathematical definition of computability equivalent to\nTuring machines or recursive functions. A fun exercise is to write a\ncompiler which translates LISP programs into recursive functions using\nthe representation of lists by single integers defined above.)\n\nAn important consequence of the fact noted above is that there is a 1-1\ncorrespondence between recursive functions of $n$ variables and\nrecursive functions of a single variable. If we have a function\n$F \\colon \\mathbb{Z}_+^n \\to \\mathbb{Z}_+$, we can associate to it the\nfunction $G \\colon \\mathbb{Z}_+ \\to \\mathbb{Z}_+$ by the formula\n$$F(x_1, \\ldots, x_n) = G( P^{(n)} (x_1, \\ldots, x_n))$$ Doing this can\noften save work by allowing one to draw conclusions about recursive\nfunctions of several variables from the special case of functions of one\nvariable.",
  "language": "INFORMAL",
  "phrase": "Pairing Function",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/PairingFunction"
    }
  ],
  "indexable": true
}