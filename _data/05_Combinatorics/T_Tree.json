{
  "alternatePhrases": [],
  "definition": "Formally, a *forest* is an undirected, acyclic graph. A forest consists\nof *trees*, which are themselves acyclic, connected graphs. For example,\nthe following diagram represents a forest, each connected component of\nwhich is a tree.\n\n$$\\xymatrix{\n\\bullet & \\bullet \\ar@{-}[d] & \\bullet \\ar@{-}[r] \\ar@{-}[d] \\ar@{-}[dr] & \\bullet  & \\bullet \\ar@{-}[r] & \\bullet \\ar@{-}[d] \\\\\n        & \\bullet            & \\bullet & \\bullet & \\bullet \\ar@{-}[r] & \\bullet\n}$$\n\nAll trees are forests, but not all forests are trees. As in a graph, a\nforest is made up of vertices (which are often called nodes\ninterchangeably) and edges. Like any graph, the vertices and edges may\neach be labelled \u2014 that is, associated with some atom of data. Therefore\na forest or a tree is often used as a data structure.\n\nOften a particular node of a tree is specified as the *root*. Such trees\nare typically drawn with the root at the top of the diagram, with all\nother nodes depending down from it (however this is not always the\ncase). A tree where a root has been specified is called a *rooted tree*.\nA tree where no root has been specified is called a *free tree*. When\nspeaking of tree traversals, and most especially of trees as\ndatastructures, rooted trees are often implied.\n\nThe edges of a rooted tree are often treated as directed. In a rooted\ntree, every non-root node has exactly one edge that leads to the root.\nThis edge can be thought of as connecting each node to its *parent*.\nOften rooted trees ae considered directed in the sense that all edges\nconnect parents to their children, but not vice-versa. Given this\nparent-child relationship, a *descendant* of a node in a directed tree\nis defined as any other node reachable from that node (that is, a node\u2019s\nchildren and all their descendants).\n\nGiven this directed notion of a rooted tree, a *rooted subtree* can be\ndefined as any node of a tree and all of its descendants. This notion of\na rooted subtree is very useful in dealing with trees inductively and\ndefining certain algorithms inductively.\n\nBecause of their simple structure and unique properties, trees and\nforests have many uses. Because of the simple definition of various tree\ntraversals, they are often used to store and lookup data. Many\nalgorithms are based upon trees, or depend upon a tree in some manner,\nsuch as the heapsort algorithm or Huffman encoding. There are also a\ngreat many specific forms and families of trees, each with its own\nconstraints, strengths, and weaknesses.",
  "language": "INFORMAL",
  "phrase": "Tree",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/Tree"
    }
  ],
  "indexable": true
}