{
  "alternatePhrases": [],
  "definition": "A triple $(V,E,w)$ is called a *labelled digraph*, if $(V,E)$ is a\ndigraph and $w$ is an association of elements from some set $L$, the\n*labels*, to some of the edges and vertices of the digraph. In other\nwords, $w$ is a mapping from a subset $A\\subseteq V\\cup E$ to $L$. Most\noften, $L$ is a subset of the real numbers, in which case $(V,E,w)$ is\ncalled a *weighted* digraph and its labels are called *weights*.\nTypically, either $A=V$ or $A=E$, in which case $(V,E,w)$ is called\neither a *vertex-weighted digraph* or an *edge-weighted digraph*,\nrespectively.\n\nApplication examples {#application-examples .unnumbered}\n--------------------\n\nWe give two typical \u201creal life\u201d examples. The first features an\nedge-weighted digraph, while the second requires the implementation of a\nvertex-weighted digraph.\n\n### Railway network {#railway-network .unnumbered}\n\nA railway network consists of railway stations connected by rails. A\ntrain needs a certain time (measured in minutes) to fare from one\nstation to another. In a formalisation, $V$ is the set of train\nstations, $E$ the set of direct connexions between them and $w\\colon\nE\\to{\\mathbb}{N}$ a weighting corresponding to the journey times, so\n$(V,E,w)$ is an edge-weighted digraph. Although typically $(V,E)$ is a ,\n$w$ does not need to be symmetric: for example, the journey from $a$ to\n$b$ might take longer than the return journey because $b$ is located on\na mountain.\n\nAn important optimisation problem is the efficient determination of the\nfastest way from one station to another. An even harder problem is to\nfind the fastest round trip (usually called a *tour*) via a given number\nof stations. This is the *travelling salesman problem*.\n\n### Dependency graph {#dependency-graph .unnumbered}\n\nA software bundle consists of a number of packages each of which is\neither installed or not. An installed package occupies a certain amount\nof bytes on a storage medium. Packages may depend on other packages,\nthat is installation of a package may require other packages to be\ninstalled first, which in turn may require still other packages and so\nforth. One is interested in the complete storage requirement incurred by\nthe installation of one package and all its dependencies.\n\nIn a formalisation, the packages are vertices of a digraph $(V,E)$, and\nan edge $(a,b)\\in E$ means \u201c$a$ depends on $b$\u201d. Such a digraph is\ntypically not symmetric. The weighting $w\\colon V\\to{\\mathbb}{N}$\nassociates sizes to packages. A subset $W$ of $V$ is\n*dependency-closed*, if for any $w\\in W$, all dependencies of $w$ are in\n$W$. Given a to-be-installed package $v$, the storage requirement\nincurred by the installation of $v$ and all its dependencies is the sum\nof the vertex weights of the smallest dependency-closed subset of $V$\ncontaining $v$.",
  "language": "INFORMAL",
  "phrase": "Labelled Digraph",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/LabelledDigraph"
    }
  ],
  "indexable": true
}