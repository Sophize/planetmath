{
  "alternatePhrases": [
    "pseudo-random numbers",
    "PRNG"
  ],
  "definition": "Generated in a digital computer by a numerical algorithm, pseudorandom\nnumbers are not random, but should appear to be random when used in\nMonte Carlo calculations.\n\nThe most widely used and best understood pseudorandom generator is the\nLehmer multiplicative congruential generator, in which each number $r$\nis calculated as a function of the preceding number in the sequence\n$$r_i = a r_{i-1}  \\pmod{m}$$ or $$r_i = a r_{i-1} + c  \\pmod{m},$$\nwhere $a$ and $c$ are carefully chosen constants, and $m$ is usually a\npower of two, $2^k$. All quantities appearing in the formula (except\n$m$) are integers of $k$ bits. The expression in brackets is an integer\nof length $2k$ bits, and the effect of the modulo $\\mod m$ is to mask\noff the most significant part of the result of the multiplication. $r_0$\nis the seed of a generation sequence; many generators allow one to start\nwith a different seed for each run of a program, to avoid re-generating\nthe same sequence, or to preserve the seed at the end of one run for the\nbeginning of a subsequent one. Before being used in calculations, the\n$r_i$ are usually transformed to floating point numbers normalized into\nthe range $[0,1]$. Generators of this type can be found which attain the\nmaximum possible period of $2^{k-2}$, and whose sequences pass all\nreasonable tests of \u201crandomness\u201d, provided one does not exhaust more\nthan a few percent of the full period.\n\nMultiplicative random number generators have serious limitations as\nrandom number generators for many tasks, especially those that involve\nlooking at spectra. A number of other fast random number generators\nexist (such as the Mersenne Twister) all with various proven good\nqualities.\n\nFor many scientific projects, analysis techniques are used that are\nextremely sensitive to patterns in the input, so when generating fake\ninput using pseudorandom number generators, it is often necessary to use\nextremely good quality pseudorandom numbers. For some projects it is in\nfact appropriate to use a hardware device which generates truly random\nnumbers, although even this must be scoured clean of patterns. Some\ncomputers now have hardware random number generators built in.\n\nHowever, there is a completely separate category of pseudorandom number\ngenerators, namely those used in cryptography. Here the goal is to make\nit computationally infeasible to deduce the next \u201crandom\u201d bit in spite\nof knowing all preceding (and possibly many future) bits. Such\npseudorandom number generators can in fact serve as cryptosystems\nthemselves: the requirements for such a random number generator are\nexactly the same as those for a stream cipher. They are generally more\nexpensive to run but produce much higher quality random numbers. To be\nused in a cryptographic application, they should also have a\nsophisticated reseeding schedule and a source of genuine randomness to\nprovide recovery from exposure of their internal state.\n\nReferences {#references .unnumbered}\n==========\n\n-   Originally from The Data Analysis Briefbook ()",
  "language": "INFORMAL",
  "phrase": "Pseudorandom Numbers",
  "remarks": "",
  "citations": [
    {
      "textCitation": "https://planetmath.org/PseudorandomNumbers"
    }
  ],
  "indexable": true
}